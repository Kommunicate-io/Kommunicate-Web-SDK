// Generated by CoffeeScript 1.7.1
/*
   Stomp Over WebSocket http://www.jmesnil.net/stomp-websocket/doc/ | Apache License V2.0

   Copyright (C) 2010-2013 [Jeff Mesnil](http://jmesnil.net/)
   Copyright (C) 2012 [FuseSource, Inc.](http://fusesource.com)
 */
   (function(){var t,e,n,i,r={}.hasOwnProperty,o=[].slice;t={LF:"\n",NULL:"\x00"};n=function(){var e;function n(t,e,n){this.command=t;this.headers=e!=null?e:{};this.body=n!=null?n:""}n.prototype.toString=function(){var e,i,o,s,u;e=[this.command];o=this.headers["content-length"]===false?true:false;if(o){delete this.headers["content-length"]}u=this.headers;for(i in u){if(!r.call(u,i))continue;s=u[i];e.push(""+i+":"+s)}if(this.body&&!o){e.push("content-length:"+n.sizeOfUTF8(this.body))}e.push(t.LF+this.body);return e.join(t.LF)};n.sizeOfUTF8=function(t){if(t){return encodeURI(t).match(/%..|./g).length}else{return 0}};e=function(e){var i,r,o,s,u,a,c,f,h,l,p,d,g,b,m,v,y;s=e.search(RegExp(""+t.LF+t.LF));u=e.substring(0,s).split(t.LF);o=u.shift();a={};d=function(t){return t.replace(/^\s+|\s+$/g,"")};v=u.reverse();for(g=0,m=v.length;g<m;g++){l=v[g];f=l.indexOf(":");a[d(l.substring(0,f))]=d(l.substring(f+1))}i="";p=s+2;if(a["content-length"]){h=parseInt(a["content-length"]);i=(""+e).substring(p,p+h)}else{r=null;for(c=b=p,y=e.length;p<=y?b<y:b>y;c=p<=y?++b:--b){r=e.charAt(c);if(r===t.NULL){break}i+=r}}return new n(o,a,i)};n.unmarshall=function(n){var i;return function(){var r,o,s,u;s=n.split(RegExp(""+t.NULL+t.LF+"*"));u=[];for(r=0,o=s.length;r<o;r++){i=s[r];if((i!=null?i.length:void 0)>0){u.push(e(i))}}return u}()};n.marshall=function(e,i,r){var o;o=new n(e,i,r);return o.toString()+t.NULL};return n}();e=function(){var e;function r(t){this.ws=t;this.ws.binaryType="arraybuffer";this.counter=0;this.connected=false;this.heartbeat={outgoing:1e4,incoming:1e4};this.maxWebSocketFrameSize=16*1024;this.subscriptions={}}r.prototype.debug=function(t){var e;return typeof window!=="undefined"&&window!==null?(e=window.console)!=null?e.log(t):void 0:void 0};e=function(){if(Date.now){return Date.now()}else{return(new Date).valueOf}};r.prototype._transmit=function(t,e,i){var r;r=n.marshall(t,e,i);if(typeof this.debug==="function"){this.debug(">>> "+r)}while(true){if(r.length>this.maxWebSocketFrameSize){this.ws.send(r.substring(0,this.maxWebSocketFrameSize));r=r.substring(this.maxWebSocketFrameSize);if(typeof this.debug==="function"){this.debug("remaining = "+r.length)}}else{return this.ws.send(r)}}};r.prototype._setupHeartbeat=function(n){var r,o,s,u,a,c;if((a=n.version)!==i.VERSIONS.V1_1&&a!==i.VERSIONS.V1_2){return}c=function(){var t,e,i,r;i=n["heart-beat"].split(",");r=[];for(t=0,e=i.length;t<e;t++){u=i[t];r.push(parseInt(u))}return r}(),o=c[0],r=c[1];if(!(this.heartbeat.outgoing===0||r===0)){s=Math.max(this.heartbeat.outgoing,r);if(typeof this.debug==="function"){this.debug("send PING every "+s+"ms")}this.pinger=i.setInterval(s,function(e){return function(){e.ws.send(t.LF);return typeof e.debug==="function"?e.debug(">>> PING"):void 0}}(this))}if(!(this.heartbeat.incoming===0||o===0)){s=Math.max(this.heartbeat.incoming,o);if(typeof this.debug==="function"){this.debug("check PONG every "+s+"ms")}return this.ponger=i.setInterval(s,function(t){return function(){var n;n=e()-t.serverActivity;if(n>s*2){if(typeof t.debug==="function"){t.debug("did not receive server activity for the last "+n+"ms")}return t.ws.close()}}}(this))}};r.prototype._parseConnect=function(){var t,e,n,i;t=1<=arguments.length?o.call(arguments,0):[];i={};switch(t.length){case 2:i=t[0],e=t[1];break;case 3:if(t[1]instanceof Function){i=t[0],e=t[1],n=t[2]}else{i.login=t[0],i.passcode=t[1],e=t[2]}break;case 4:i.login=t[0],i.passcode=t[1],e=t[2],n=t[3];break;default:i.login=t[0],i.passcode=t[1],e=t[2],n=t[3],i.host=t[4]}return[i,e,n]};r.prototype.connect=function(){var r,s,u,a;r=1<=arguments.length?o.call(arguments,0):[];a=this._parseConnect.apply(this,r);u=a[0],this.connectCallback=a[1],s=a[2];if(typeof this.debug==="function"){this.debug("Opening Web Socket...")}this.ws.onmessage=function(i){return function(r){var o,u,a,c,f,h,l,p,d,g,b,m;c=typeof ArrayBuffer!=="undefined"&&r.data instanceof ArrayBuffer?(o=new Uint8Array(r.data),typeof i.debug==="function"?i.debug("--- got data length: "+o.length):void 0,function(){var t,e,n;n=[];for(t=0,e=o.length;t<e;t++){u=o[t];n.push(String.fromCharCode(u))}return n}().join("")):r.data;i.serverActivity=e();if(c===t.LF){if(typeof i.debug==="function"){i.debug("<<< PONG")}return}if(typeof i.debug==="function"){i.debug("<<< "+c)}b=n.unmarshall(c);m=[];for(d=0,g=b.length;d<g;d++){f=b[d];switch(f.command){case"CONNECTED":if(typeof i.debug==="function"){i.debug("connected to server "+f.headers.server)}i.connected=true;i._setupHeartbeat(f.headers);m.push(typeof i.connectCallback==="function"?i.connectCallback(f):void 0);break;case"MESSAGE":p=f.headers.subscription;l=i.subscriptions[p]||i.onreceive;if(l){a=i;h=f.headers["message-id"];f.ack=function(t){if(t==null){t={}}return a.ack(h,p,t)};f.nack=function(t){if(t==null){t={}}return a.nack(h,p,t)};m.push(l(f))}else{m.push(typeof i.debug==="function"?i.debug("Unhandled received MESSAGE: "+f):void 0)}break;case"RECEIPT":m.push(typeof i.onreceipt==="function"?i.onreceipt(f):void 0);break;case"ERROR":m.push(typeof s==="function"?s(f):void 0);break;default:m.push(typeof i.debug==="function"?i.debug("Unhandled frame: "+f):void 0)}}return m}}(this);this.ws.onclose=function(t){return function(){var e;e="Whoops! Lost connection to "+t.ws.url;if(typeof t.debug==="function"){t.debug(e)}t._cleanUp();return typeof s==="function"?s(e):void 0}}(this);return this.ws.onopen=function(t){return function(){if(typeof t.debug==="function"){t.debug("Web Socket Opened...")}u["accept-version"]=i.VERSIONS.supportedVersions();u["heart-beat"]=[t.heartbeat.outgoing,t.heartbeat.incoming].join(",");return t._transmit("CONNECT",u)}}(this)};r.prototype.disconnect=function(t,e){if(e==null){e={}}this._transmit("DISCONNECT",e);this.ws.onclose=null;this.ws.close();this._cleanUp();return typeof t==="function"?t():void 0};r.prototype._cleanUp=function(){this.connected=false;if(this.pinger){i.clearInterval(this.pinger)}if(this.ponger){return i.clearInterval(this.ponger)}};r.prototype.send=function(t,e,n){if(e==null){e={}}if(n==null){n=""}e.destination=t;return this._transmit("SEND",e,n)};r.prototype.subscribe=function(t,e,n){var i;if(n==null){n={}}if(!n.id){n.id="sub-"+this.counter++}n.destination=t;this.subscriptions[n.id]=e;this._transmit("SUBSCRIBE",n);i=this;return{id:n.id,unsubscribe:function(){return i.unsubscribe(n.id)}}};r.prototype.unsubscribe=function(t){delete this.subscriptions[t];return this._transmit("UNSUBSCRIBE",{id:t})};r.prototype.begin=function(t){var e,n;n=t||"tx-"+this.counter++;this._transmit("BEGIN",{transaction:n});e=this;return{id:n,commit:function(){return e.commit(n)},abort:function(){return e.abort(n)}}};r.prototype.commit=function(t){return this._transmit("COMMIT",{transaction:t})};r.prototype.abort=function(t){return this._transmit("ABORT",{transaction:t})};r.prototype.ack=function(t,e,n){if(n==null){n={}}n["message-id"]=t;n.subscription=e;return this._transmit("ACK",n)};r.prototype.nack=function(t,e,n){if(n==null){n={}}n["message-id"]=t;n.subscription=e;return this._transmit("NACK",n)};return r}();i={VERSIONS:{V1_0:"1.0",V1_1:"1.1",V1_2:"1.2",supportedVersions:function(){return"1.1,1.0"}},client:function(t,n){var r,o;if(n==null){n=["v10.stomp","v11.stomp"]}r=i.WebSocketClass||WebSocket;o=new r(t,n);return new e(o)},over:function(t){return new e(t)},Frame:n};if(typeof exports!=="undefined"&&exports!==null){exports.Stomp=i}if(typeof window!=="undefined"&&window!==null){i.setInterval=function(t,e){return window.setInterval(e,t)};i.clearInterval=function(t){return window.clearInterval(t)};window.Stomp=i}else if(!exports){self.Stomp=i}}).call(this);
   var w = window,
       d = document;
   var MCK_LABELS;
   var MCK_BASE_URL;
   var MCK_CURR_LATITIUDE = 40.7324319;
   var MCK_CURR_LONGITUDE = -73.82480777777776;
   var ENCRYPTION_IV = null;
   var ENCRYPTION_TYPE = null;
   var mckUtils = new MckUtils();
   var mckDateUtils = new MckDateUtils();
   var mckContactUtils = new MckContactUtils();
   var mckMapUtils = new MckMapUtils();
   function MckUtils() {
       var _this = this;
       _this.AES256_ENC_TYPE = 5;
       var TEXT_NODE = 3,
           ELEMENT_NODE = 1,
           TAGS_BLOCK = [ 'p', 'div', 'pre', 'form' ];
       _this.init = function() {
           var initurl = MCK_CONTEXTPATH? MCK_CONTEXTPATH+"/v2/tab/initialize.page" :"https://apps.applozic.com/v2/tab/initialize.page";
           var messurl = MCK_CONTEXTPATH? MCK_CONTEXTPATH+"/rest/ws/message/list" :"https://apps.applozic.com/rest/ws/message/list";
           $applozic.ajax({
               url: initurl,
               contentType: 'application/json',
               type: 'OPTIONS'
           }).done(function(data) {});
   
           $applozic.ajax({
               url: messurl,
               contentType: 'application/json',
               type: 'OPTIONS'
           }).done(function(data) {});
       }
       _this.showElement = function(element) {
   
         if (typeof element !== "object" &&(typeof element !=='undefined' && typeof element !== null) ||(element && typeof element === "object" && element.length !==0)){
   
               element.classList.remove('n-vis');
               element.classList.add('vis');
           }
   
       }
       _this.hideElement= function(element) {
   
         if (typeof element !== "object" &&(typeof element !=='undefined' && typeof element !== null) ||(element && typeof element === "object" && element.length !==0)){
   
               element.classList.remove('vis');
               element.classList.add('n-vis');
           }
       };
       _this.badgeCountOnLaucher = function(enablebadgecount,totalunreadCount) {
              var element = document.getElementById("applozic-badge-count");
          if(enablebadgecount === true && totalunreadCount > 0){
            if(totalunreadCount < 99){
                element.innerHTML = totalunreadCount;
              }
             else {
               element.innerHTML = "99+";
             }
             element.classList.add("mck-badge-count");
           }
           if(enablebadgecount === true && totalunreadCount === 0){
                  element.innerHTML ="";
                  element.classList.remove("mck-badge-count");
           }
       };
       _this.randomId = function() {
           return w.Math.random().toString(36).substring(7);
       };
       _this.textVal = function($element) {
           var lines = [];
           var line = [];
           var flush = function() {
               lines.push(line.join(''));
               line = [];
           };
           var sanitizeNode = function(node) {
               if (node.nodeType === TEXT_NODE) {
                   line.push(node.nodeValue);
               } else if (node.nodeType === ELEMENT_NODE) {
                   var tagName = node.tagName.toLowerCase();
                   var isBlock = TAGS_BLOCK.indexOf(tagName) !== -1;
                   if (isBlock && line.length) {
                       flush();
                   }
                   if (tagName === 'img') {
                       var alt = node.getAttribute('alt') || '';
                       if (alt) {
                           line.push(alt);
                       }
                       return;
                   } else if (tagName === 'style') {
                       return;
                   } else if (tagName === 'br') {
                       flush();
                   }
                   var children = node.childNodes;
                   for (var i = 0; i < children.length; i++) {
                       sanitizeNode(children[i]);
                   }
                   if (isBlock && line.length) {
                       flush();
                   }
               }
           };
           var children = $element.childNodes;
           for (var i = 0; i < children.length; i++) {
               sanitizeNode(children[i]);
           }
           if (line.length) {
               flush();
           }
           return lines.join('\n');
       };
       _this.mouseX = function(evt) {
           if (evt.pageX) {
               return evt.pageX;
           } else if (evt.clientX) {
               return evt.clientX + (d.documentElement.scrollLeft ? d.documentElement.scrollLeft : d.body.scrollLeft);
           } else {
               return null;
           }
       };
       _this.mouseY = function(evt) {
           if (evt.pageY) {
               return evt.pageY;
           } else if (evt.clientY) {
               return evt.clientY + (d.documentElement.scrollTop ? d.documentElement.scrollTop : d.body.scrollTop);
           } else {
               return null;
           }
       };
       _this.startsWith = function(matcher, str) {
           if (str === null || typeof matcher === 'undefined')
               return false;
           var i = str.length;
           if (matcher.length < i)
               return false;
           for (--i; (i >= 0) && (matcher[i] === str[i]); --i)
               continue;
           return i < 0;
       };
       _this.setEndOfContenteditable = function(contentEditableElement) {
           var range,
               selection;
           if (document.createRange) //Firefox, Chrome, Opera, Safari, IE 9+
           {
               range = document.createRange(); //Create a range (a range is a like the selection but invisible)
               range.selectNodeContents(contentEditableElement); //Select the entire contents of the element with the range
               range.collapse(false); //collapse the range to the end point. false means collapse to end rather than the start
               selection = window.getSelection(); //get the selection object (allows you to change selection)
               selection.removeAllRanges(); //remove any selections already made
               selection.addRange(range); //make the range you have just created the visible selection
           } else if (document.selection) //IE 8 and lower
           {
               range = document.body.createTextRange(); //Create a range (a range is a like the selection but invisible)
               range.moveToElementText(contentEditableElement); //Select the entire contents of the element with the range
               range.collapse(false); //collapse the range to the end point. false means collapse to end rather than the start
               range.select(); //Select the range (make it the visible selection
           }
       };
   
       _this.b64EncodeUnicode = function(str) {
           return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {
               return String.fromCharCode('0x' + p1);
           }));
       };
   
       _this.b64DecodeUnicode = function(str) {
           return decodeURIComponent(Array.prototype.map.call(atob(str), function(c) {
               return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
           }).join(''));
       };
   
       _this.checkIfB64Encoded = function(str) {
           var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/; // check base64 encoding
           return base64regex.test(str)
       };
   
       _this.encrypt128 = function(options) {
           var key = CryptoJS.enc.Utf8.parse(options.encryptionKey);
           var encrypted = CryptoJS.AES.encrypt(options.data, key, {
               mode: CryptoJS.mode.ECB,
               padding: CryptoJS.pad.ZeroPadding,
           });
           return encrypted.toString();
       };
   
       _this.encrypt256 = function(options) {
           var key = CryptoJS.enc.Base64.parse(options.encryptionKey);
           var IV = CryptoJS.enc.Latin1.parse(_this.getCryptographyUtils().ENCRYPTION_IV);
   
           var encrypted = CryptoJS.AES.encrypt(options.data, key, {
               iv: IV,
           });
           return encrypted.ciphertext.toString(CryptoJS.enc.Base64);
       };
   
       _this.encrypt = function(data, encryptionKey) {
           if (!encryptionKey) {
               return data;
           }
           var encryptedData;
   
           if (_this.isAES256EncryptionType()) {
               encryptedData = _this.encrypt256({data, encryptionKey});
           }
           else {
               encryptedData = _this.encrypt128({data, encryptionKey});
           }
   
           return encryptedData;
       };
   
       _this.decrypt128 = function(options) {
           var key = CryptoJS.enc.Utf8.parse(options.encryptionKey);
           var cipherParams = CryptoJS.lib.CipherParams.create({
               ciphertext: CryptoJS.enc.Base64.parse(options.data),
           });
           var decrypted = CryptoJS.AES.decrypt(cipherParams, key, {
               mode: CryptoJS.mode.ECB,
               padding: CryptoJS.pad.ZeroPadding,
           });
           var response = decrypted.toString(CryptoJS.enc.Utf8);
           return response
               .replace(/\\u0000/g, "")
               .replace(/^\s*|\s*[\x00-\x10]*$/g, "");
       };
   
       _this.decrypt256 = function(options) {
           var key = CryptoJS.enc.Base64.parse(options.encryptionKey);
           var IV = CryptoJS.enc.Latin1.parse(_this.getCryptographyUtils().ENCRYPTION_IV); // we get the encryptionIV as a string from backend this need to be convert in arbitrary number.
   
           var cipherParams = CryptoJS.lib.CipherParams.create({
               ciphertext: CryptoJS.enc.Base64.parse(options.data),
           });
   
           var decrypted = CryptoJS.AES.decrypt(cipherParams, key, {
               iv: IV,
           });
           return decrypted.toString(CryptoJS.enc.Utf8);
       };
   
       _this.decrypt = function(data, encryptionKey) {
           if (!encryptionKey) {
               return data;
           }
           var decryptedData;
           if (_this.isAES256EncryptionType()) {
               decryptedData = _this.decrypt256({data, encryptionKey});
           } else {
               decryptedData = _this.decrypt128({data, encryptionKey});
           }
   
           return decryptedData;
       };
   
       _this.setCryptographyUtils = function(IV, type){
           ENCRYPTION_IV  = IV;
           ENCRYPTION_TYPE = type
       };
   
       _this.getCryptographyUtils = function(){
           return { ENCRYPTION_IV, ENCRYPTION_TYPE }
       }
   
       _this.isAES256EncryptionType = function(){
         return (
           _this.getCryptographyUtils().ENCRYPTION_TYPE === _this.AES256_ENC_TYPE
         );
       }
   
       _this.ajax = function(options) {
           var reqOptions = _this.extendObject({}, {}, options);
           if (!options.skipEncryption && options.encryptionKey) {
               if (reqOptions.type.toLowerCase() === 'post') {
                   reqOptions.data = encrypt(options.data, options.encryptionKey);
               }
   
               reqOptions.success = function (data) {
                   var res = _this.decrypt(data, options.encryptionKey);
   
                   if (mckUtils.isJsonString(res)) {
                       options.success(JSON.parse(res));
                   } else {
                       options.success(res);
                   }
               }
         }
           $applozic.ajax(reqOptions);
       };
   
       _this.isJsonString = function(str) {
           try {
               JSON.parse(str);
           } catch (e) {
               return false;
           }
           return isNaN(str);
       };
       /*
       - This is alternative for Jquery deep extend. Refer this link for help https://api.jquery.com/jquery.extend/
       - Pass in the objects to merge as arguments.
       - For a deep extend, set the first argument to `true`.
       */
       _this.extendObject = function () {
           // Variables
           var extended = {};
           var deep = false;
           var i = 0;
           var length = arguments.length;
   
           // Check if a deep merge
           if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {
               deep = arguments[0];
               i++;
           }
   
           // Merge the object into the extended object
           var merge = function (obj) {
               for (var prop in obj) {
                   if (Object.prototype.hasOwnProperty.call(obj, prop)) {
                       // If deep merge and property is an object, merge properties
                       if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {
                           extended[prop] = _this.extendObject(true, extended[prop], obj[prop]);
                       } else {
                           extended[prop] = obj[prop];
                       }
                   }
               }
           };
   
           // Loop through each object and conduct a merge
           for (; i < length; i++) {
               var obj = arguments[i];
               merge(obj);
           }
   
           return extended;
       };
   
   }
   function MckContactUtils() {
       var _this = this;
       _this.getContactId = function(contact) {
           var contactId = contact.contactId;
           return _this.formatContactId(contactId);
       };
       _this.formatContactId = function (contactId) {
           if (contactId) {
               contactId.indexOf('+') === 0 && (contactId = contactId.substring(1));
               contactId = decodeURIComponent(contactId);
               contactId = contactId.replace(/\%/g, "PERCENTAGE").replace(/\~/g, "TILDE").replace(/\!/g, "EXCLAMATION_MARK").replace(/\*/g, "STAR").replace(/\(/g, "LEFT_PARENTHESIS").replace(/\)/g, "RIGHT_PARENTHESIS").replace(/\-/g, "DASH").replace(/\@/g, "AT").replace(/\./g, "DOT").replace(/\#/g, "HASH").replace(/\|/g, "VBAR").replace(/\+/g, "PLUS").replace(/\;/g, "SCOLON").replace(/\?/g, "QMARK").replace(/\//g,"FORWARDSLASH").trim();
           }
           return contactId;
       };
   }
   function MckMapUtils() {
       var _this = this;
       _this.getCurrentLocation = function(succFunc, errFunc) {
           w.navigator.geolocation.getCurrentPosition(succFunc, errFunc);
       };
       _this.getSelectedLocation = function() {
           return {
               lat: MCK_CURR_LATITIUDE,
               lon: MCK_CURR_LONGITUDE
           };
       };
   }
   function MckDateUtils() {
       var _this = this;
       var fullDateFormat = 'mmm d, h:MM TT';
       var onlyDateFormat = 'mmm d';
       var onlyTimeFormat = 'h:MM TT';
       var months = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];
       _this.getDate = function(createdAtTime) {
           var date = new Date(parseInt(createdAtTime, 10));
           var currentDate = new Date();
           return ((currentDate.getDate() === date.getDate()) && (currentDate.getMonth() === date.getMonth()) && (currentDate.getYear() === date.getYear())) ? dateFormat(date, onlyTimeFormat, false) : dateFormat(date, fullDateFormat, false);
       };
       _this.getLastSeenAtStatus = function(lastSeenAtTime) {
           var date = new Date(parseInt(lastSeenAtTime, 10));
           var currentDate = new Date();
           if ((currentDate.getDate() === date.getDate()) && (currentDate.getMonth() === date.getMonth()) && (currentDate.getYear() === date.getYear())) {
               var hoursDiff = currentDate.getHours() - date.getHours();
               var timeDiff = w.Math.floor((currentDate.getTime() - date.getTime()) / 60000);
               if (timeDiff < 60) {
                   return (timeDiff <= 1) ? MCK_LABELS['last.seen'] + ' 1 '+ MCK_LABELS['min'] +' '+ MCK_LABELS['ago'] : MCK_LABELS['last.seen'] + ' ' + timeDiff + MCK_LABELS['mins'] +' '+MCK_LABELS['ago'];
               }
               return (hoursDiff === 1) ? MCK_LABELS['last.seen'] + ' 1 '+ MCK_LABELS['hour'] +' '+MCK_LABELS['ago'] : MCK_LABELS['last.seen'] + ' ' + hoursDiff + MCK_LABELS['hours'] +' '+ MCK_LABELS['ago'];
           } else if ( ((currentDate.getDate() - date.getDate() === 1) && (currentDate.getMonth() === date.getMonth()) && (currentDate.getYear() === date.getYear())) ) {
               return MCK_LABELS['last.seen.on'] + ' '+ MCK_LABELS['yesterday'];
           } else {
               return MCK_LABELS['last.seen.on'] + ' ' + dateFormat(date, onlyDateFormat, false);
           }
       };
       _this.getTimeOrDate = function(createdAtTime, timeFormat) {
           var date = new Date(parseInt(createdAtTime, 10));
           var currentDate = new Date();
           if (timeFormat) {
               return ((currentDate.getDate() === date.getDate()) && (currentDate.getMonth() === date.getMonth()) && (currentDate.getYear() === date.getYear())) ? dateFormat(date, onlyTimeFormat, false) : dateFormat(date, onlyDateFormat, false);
           } else {
               return dateFormat(date, fullDateFormat, false);
           }
       };
       _this.getSystemDate = function(time) {
           var date = new Date(parseInt(time, 10));
           return dateFormat(date, fullDateFormat, false);
       };
       _this.convertMilisIntoTime= function(millisec){
           var duration;
            var milliseconds = parseInt((millisec%1000)/100),
           seconds = parseInt((millisec/1000)%60),
           minutes = parseInt((millisec/(1000*60))%60),
           hours = parseInt((millisec/(1000*60*60))%24);
   
           if(hours>0){
               duration= hours + " Hr " + minutes + " Min " + seconds + " Sec";
           }else if(minutes>0){
               duration= minutes + " Min " + seconds + " Sec";
           }else{
               duration= seconds + " Sec ";
           }
           return duration;
   
       };
       var dateFormat = function() {
           var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
               timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
               timezoneClip = /[^-+\dA-Z]/g,
               pad = function(val, len) {
                   val = String(val);
                   len = len || 2;
                   while (val.length < len)
                   val = '0' + val;
                   return val;
               };
           // Regex's and supporting functions are cached through closure
           return function(date, mask, utc) {
               var dF = dateFormat;
               // You can't provide utc if you skip other args (use the
               // "UTC:" mask prefix)
               if (arguments.length === 1 && Object.prototype.toString.call(date) === '[object String]' && !/\d/.test(date)) {
                   mask = date;
                   date = undefined;
               }
               // Passing date through Date applies Date.parse, if
               // necessary
               date = date ? new Date(date) : new Date;
               if (isNaN(date))
                   throw SyntaxError('invalid date');
               mask = String(mask);
               // mask = String(dF.masks[mask] || mask ||
               // dF.masks["default"]);
               // Allow setting the utc argument via the mask
               if (mask.slice(0, 4) === 'UTC:') {
                   mask = mask.slice(4);
                   utc = true;
               }
               var _ = utc ? 'getUTC' : 'get',
                   d = date[_ + 'Date'](),
                   D = date[_ + 'Day'](),
                   m = date[_ + 'Month'](),
                   y = date[_ + 'FullYear'](),
                   H = date[_ + 'Hours'](),
                   M = date[_ + 'Minutes'](),
                   s = date[_ + 'Seconds'](),
                   L = date[_ + 'Milliseconds'](),
                   o = utc ? 0 : date.getTimezoneOffset(),
                   flags = {
                       d: d,
                       dd: pad(d),
                       ddd: dF.i18n.dayNames[D],
                       dddd: dF.i18n.dayNames[D + 7],
                       m: m + 1,
                       mm: pad(m + 1),
                       mmm: dF.i18n.monthNames[m],
                       mmmm: dF.i18n.monthNames[m + 12],
                       yy: String(y).slice(2),
                       yyyy: y,
                       h: H % 12 || 12,
                       hh: pad(H % 12 || 12),
                       H: H,
                       HH: pad(H),
                       M: M,
                       MM: pad(M),
                       s: s,
                       ss: pad(s),
                       l: pad(L, 3),
                       L: pad(L > 99 ? w.Math.round(L / 10) : L),
                       t: H < 12 ? 'a' : 'p',
                       tt: H < 12 ? MCK_LABELS['time.format.am'] || 'am': MCK_LABELS['time.format.pm'] || 'pm',
                       T: H < 12 ? 'A' : 'P',
                       TT: H < 12 ? MCK_LABELS['time.format.AM'] || 'AM': MCK_LABELS['time.format.PM'] || 'PM',
                       Z: utc ? 'UTC' : (String(date).match(timezone) || [ '' ]).pop().replace(timezoneClip, ''),
                       o: (o > 0 ? '-' : '+') + pad(w.Math.floor(w.Math.abs(o) / 60) * 100 + w.Math.abs(o) % 60, 4),
                       S: [ 'th', 'st', 'nd', 'rd' ][d % 10 > 3 ? 0 : (d % 100 - d % 10 !== 10) * d % 10]
                   };
               return mask.replace(token, function($0) {
                   return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
               });
           };
       }();
       // Some common format strings
       dateFormat.masks = {
           'default': 'mmm d, yyyy h:MM TT',
           fullDateFormat: "mmm d, yyyy h:MM TT",
           onlyDateFormat: "mmm d",
           onlyTimeFormat: "h:MM TT",
           mailDateFormat: "mmm d, yyyy",
           mediumDate: "mmm d, yyyy",
           longDate: "mmmm d, yyyy",
           fullDate: "dddd, mmmm d, yyyy",
           shortTime: "h:MM TT",
           mediumTime: "h:MM:ss TT",
           longTime: "h:MM:ss TT Z",
           isoDate: "yyyy-mm-dd",
           isoTime: "HH:MM:ss",
           isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
           isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
       };
       // Internationalization strings
       dateFormat.i18n = {
           dayNames: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
           monthNames: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ]
       };
   }
   
   (function(window){
       'use strict';
       function define_Applozic(){
           var Applozic = {};
           Applozic.init = function(){
             
           }
           return Applozic;
       }
       //define globally if it doesn't already exist
       if(typeof(Applozic) === 'undefined'){
           window.Applozic = define_Applozic();
       }
       else{
           console.log("Applozic already defined.");
       }
   })(window);
   
   var ALStorage = (function (win) {
       var MCK_LATEST_MESSAGE_ARRAY = [];
       var MCK_MESSAGE_ARRAY = [];
       var MCK_MESSAGE_MAP = [];
       var MCK_CONTACT_NAME_ARRAY = [];
       var FRIEND_LIST_GROUP_NAME;
       var FRIEND_LIST_GROUP_TYPE;
       var ENCRYPTION_KEY;
       var mckUtils = new MckUtils();
       var APP_ID = applozic._globals.appId;
       var setItemInSessionStorage = (key, value) => {
           w.sessionStorage.setItem(key + "-" + APP_ID, value);
       }
   
       var getItemFromSessionStorage = (key) => {
           // replace if any existing data
           var existingData = w.sessionStorage.getItem(key);
           if(existingData){
               setItemInSessionStorage(key, existingData);
               w.sessionStorage.removeItem(key);
           }
           return w.sessionStorage.getItem(key + "-" + APP_ID);
       }
   
       var removeItemFromSessionStorage = (key) => {
           w.sessionStorage.removeItem(key + "-" + APP_ID);
       }
   
       return {
           updateLatestMessage: function (message) {
               var messageArray = [];
               messageArray.push(message);
               ALStorage.updateLatestMessageArray(messageArray);
               ALStorage.updateMckMessageArray(messageArray);
           },
           getLatestMessageArray: function () {
               return (ALStorage.isSessionStorageAvailable()) ? JSON.parse(getItemFromSessionStorage("mckLatestMessageArray")) : MCK_LATEST_MESSAGE_ARRAY;
           },
           getFriendListGroupName: function () {
               return (ALStorage.isSessionStorageAvailable()) ? getItemFromSessionStorage("friendListGroupName") : FRIEND_LIST_GROUP_NAME;
           },
           setFriendListGroupName: function (friendListGroupName) {
               if (ALStorage.isSessionStorageAvailable()) {
                   setItemInSessionStorage('friendListGroupName', friendListGroupName);
               } else {
                   FRIEND_LIST_GROUP_NAME = friendListGroupName;
               }
           },
           setFriendListGroupType: function (friendListGroupType) {
               if (ALStorage.isSessionStorageAvailable()) {
                   setItemInSessionStorage('friendListGroupType', friendListGroupType);
               } else {
                   FRIEND_LIST_GROUP_TYPE = friendListGroupType;
               }
           },
           getFriendListGroupType: function () {
               return (ALStorage.isSessionStorageAvailable()) ? getItemFromSessionStorage("friendListGroupType") : FRIEND_LIST_GROUP_TYPE;
           },
           setLatestMessageArray: function (messages) {
               if (ALStorage.isSessionStorageAvailable()) {
                   setItemInSessionStorage('mckLatestMessageArray', w.JSON.stringify(messages));
               } else {
                   MCK_LATEST_MESSAGE_ARRAY = messages;
               }
           },
           updateLatestMessageArray: function (mckMessageArray) {
               if (ALStorage.isSessionStorageAvailable()) {
                   var mckLocalMessageArray = JSON.parse(getItemFromSessionStorage('mckLatestMessageArray'));
                   if (mckLocalMessageArray !== null) {
                       mckLocalMessageArray = mckLocalMessageArray.concat(mckMessageArray);
                       setItemInSessionStorage('mckLatestMessageArray', w.JSON.stringify(mckLocalMessageArray));
                   } else {
                       setItemInSessionStorage('mckLatestMessageArray', w.JSON.stringify(mckMessageArray));
                   }
                   return mckMessageArray;
               } else {
                   MCK_LATEST_MESSAGE_ARRAY = MCK_LATEST_MESSAGE_ARRAY.concat(mckMessageArray);
                   return MCK_LATEST_MESSAGE_ARRAY;
               }
           },
           getMckMessageArray: function () {
               return (ALStorage.isSessionStorageAvailable()) ? JSON.parse(getItemFromSessionStorage("mckMessageArray")) : MCK_MESSAGE_ARRAY;
           },
           clearMckMessageArray: function () {
               if (ALStorage.isSessionStorageAvailable()) {
                   removeItemFromSessionStorage('mckMessageArray');
                   removeItemFromSessionStorage('mckLatestMessageArray');
               } else {
                   MCK_MESSAGE_ARRAY.length = 0;
                   MCK_LATEST_MESSAGE_ARRAY.length = 0;
               }
           },
           clearAppHeaders: function () {
               if (ALStorage.isSessionStorageAvailable()) {
                   removeItemFromSessionStorage('chatheaders');
               }
           },
           setAppHeaders: function (data) {
               if (ALStorage.isSessionStorageAvailable()) {
                   var encryptData = mckUtils.b64EncodeUnicode(JSON.stringify(data));
                   setItemInSessionStorage("chatheaders", encryptData);
               }
           },
           getAppHeaders: function () {
               if (ALStorage.isSessionStorageAvailable()) {
                   var data = getItemFromSessionStorage('chatheaders');
                   data = data ? JSON.parse(mckUtils.checkIfB64Encoded(data) ? mckUtils.b64DecodeUnicode(data) : data) : {};
                   return data;
               }
           },
           getMessageByKey: function (key) {
               return MCK_MESSAGE_MAP[key];
           },
           updateMckMessageArray: function (mckMessageArray) {
               for (var i = 0; i < mckMessageArray.length; i++) {
                   var message = mckMessageArray[i];
                   MCK_MESSAGE_MAP[message.key] = message;
               }
               if (ALStorage.isSessionStorageAvailable()) {
                   var mckLocalMessageArray = JSON.parse(getItemFromSessionStorage('mckMessageArray'));
                   if (mckLocalMessageArray !== null) {
                       mckLocalMessageArray = mckLocalMessageArray.concat(mckMessageArray);
                       setItemInSessionStorage('mckMessageArray', w.JSON.stringify(mckLocalMessageArray));
                   } else {
                       setItemInSessionStorage('mckMessageArray', w.JSON.stringify(mckMessageArray));
                   }
                   return mckMessageArray;
               } else {
                   MCK_MESSAGE_ARRAY = MCK_MESSAGE_ARRAY.concat(mckMessageArray);
                   return MCK_MESSAGE_ARRAY;
               }
           },
           getMckContactNameArray: function () {
               return (ALStorage.isSessionStorageAvailable()) ? JSON.parse(getItemFromSessionStorage("mckContactNameArray")) : MCK_CONTACT_NAME_ARRAY;
           },
           setMckContactNameArray: function (mckContactNameArray) {
               if (ALStorage.isSessionStorageAvailable()) {
                   setItemInSessionStorage('mckContactNameArray', w.JSON.stringify(mckContactNameArray));
               } else {
                   MCK_CONTACT_NAME_ARRAY = mckContactNameArray;
               }
           },
           updateMckContactNameArray: function (mckContactNameArray) {
               if (ALStorage.isSessionStorageAvailable()) {
                   var mckLocalcontactNameArray = JSON.parse(getItemFromSessionStorage('mckContactNameArray'));
                   if (mckLocalcontactNameArray !== null) {
                       mckContactNameArray = mckContactNameArray.concat(mckLocalcontactNameArray);
                   }
                   setItemInSessionStorage('mckContactNameArray', w.JSON.stringify(mckContactNameArray));
                   return mckContactNameArray;
               } else {
                   MCK_CONTACT_NAME_ARRAY = MCK_CONTACT_NAME_ARRAY.concat(mckContactNameArray);
                   return MCK_CONTACT_NAME_ARRAY;
               }
           },
           clearMckContactNameArray: function () {
               if (ALStorage.isSessionStorageAvailable()) {
                   removeItemFromSessionStorage('mckContactNameArray');
               } else {
                   MCK_CONTACT_NAME_ARRAY.length = 0;
               }
           },
           clearSessionStorageElements: function () {
               ALStorage.clearMckMessageArray();
               ALStorage.clearAppHeaders();
               ALStorage.clearMckContactNameArray();
           },
           isSessionStorageAvailable: function () {
               try {
                   return typeof (w.sessionStorage) !== 'undefined';
               } catch (error) {
                   return false;
               }
           }
       };
   })(window);
   
   (function (window) {
       'use strict';
       function define_ALApiService(getBaseUrl) {
           var ALApiService = {};
           var MCK_APP_ID = "";
           var mckUtils = new MckUtils();
           ALApiService.DEFAULT_ENCRYPTED_APP_VERSION = 112;
           var MCK_BASE_URL = 'https://apps.applozic.com';
           var S3_MIGRATION_URL = 'applozic.appspot.com';
           var MCK_FILE_URL = 'https://applozic.appspot.com'
           var CUSTOM_FILE_UPLOAD_URL = '/files/upload/';
           var MCK_CUSTOM_URL = "https://googleupload.applozic.com";
           var INITIALIZE_APP_URL = "/v2/tab/initialize.page";
           var MESSAGE_LIST_URL = "/rest/ws/message/list";
           var MESSAGE_SEND_URL = "/rest/ws/message/send";
           var GROUP_CREATE_URL = "/rest/ws/group/create";
           var GROUP_LIST_URL = "/rest/ws/group/list";
           var GROUP_INFO_URL = "/rest/ws/group/v2/info";
           var GROUP_ADD_MEMBER_URL = "/rest/ws/group/add/member";
           var GROUP_REMOVE_MEMBER_URL = "/rest/ws/group/remove/member";
           var GROUP_LEFT_URL = "/rest/ws/group/left";
           var GROUP_UPDATE_URL = "/rest/ws/group/update";
           var GROUP_IS_USER_PRESENT_URL = "/rest/ws/group/check/user";
           var GROUP_USER_COUNT_URL = "/rest/ws/group/user/count";
           var FRIEND_LIST_URL = "/rest/ws/group/";
           var GET_USER_DETAIL_URL = "/rest/ws/user/v2/detail";
           var UPDATE_USER_DETAIL_URL = "/rest/ws/user/update";
           var USER_FILTER = "/rest/ws/user/filter";
           var LOGOUT = "/rest/ws/device/logout";
           var USER_FILTER_BY_ROLE = "/rest/ws/user/v3/filter";
           var USER_BLOCK_URL = "/rest/ws/user/block";
           var USER_UNBLOCK_URL = "/rest/ws/user/unblock";
           var UPDATE_PASSWORD_URL = "/rest/ws/user/update/password";
           var UPDATE_REPLY_MAP = "/rest/ws/message/detail";
           var MESSAGE_DELETE_URL = "/rest/ws/message/delete";
           var MESSAGE_READ_UPDATE_URL = "/rest/ws/message/read";
           var MESSAGE_DELIVERY_UPDATE_URL = "/rest/ws/message/delivered";
           var CONVERSATION_CLOSE_UPDATE_URL = "/rest/ws/conversation/close";
           var FILE_PREVIEW_URL = "/rest/ws/aws/file";
           var FILE_UPLOAD_URL = "/rest/ws/aws/file/url";
           var FILE_AWS_UPLOAD_URL = "/rest/ws/upload/file";
           var FILE_DELETE_URL = "/rest/ws/aws/file/delete";
           var MESSAGE_ADD_INBOX_URL = "/rest/ws/message/add/inbox";
           var CONVERSATION_READ_UPDATE_URL = "/rest/ws/message/read/conversation";
           var CONVERSATION_DELETE_URL = "/rest/ws/message/delete/conversation";
           var ONE_TO_ONE_MUTE_URL = "/rest/ws/user/chat/mute";
           var GROUP_MUTE_URL = "/rest/ws/group/user/update";
           var REGISTER_CLIENT_URL = "/rest/ws/register/client";
           var SYNC_MUTE_USER_URL = "/rest/ws/user/chat/mute/list";
           var TOPIC_ID_URL = "/rest/ws/conversation/topicId";
           var CONTACT_NAME_URL = "/rest/ws/user/info";
           var USER_STATUS_URL = "/rest/ws/user/chat/status";
           var CONVERSATION_FETCH_URL = "/rest/ws/conversation/get";
           var CONVERSATION_ID_URL = "/rest/ws/conversation/id";
           var FILE_AWS_UPLOAD_URL = "/rest/ws/upload/file";
           var ATTACHMENT_UPLOAD_URL = "/rest/ws/upload/image";
           var PUSH_NOTIFICATION_LOGOUT = "/rest/ws/device/logout";
           var MCK_SW_REGISTER_URL = "/rest/ws/plugin/update/sw/id";
           var ACCESS_TOKEN;
           var DEVICE_KEY;
           var APP_MODULE_NAME;
           var AUTH_CODE;
           var ENCRYPTION_KEY, USER_ENCRYPTION_KEY;
           var MCK_CUSTOM_UPLOAD_SETTINGS;
   
           function getAsUriParameters(data) {
               var url = '';
               for (var prop in data) {
                   url += encodeURIComponent(prop) + '=' +
                       encodeURIComponent(data[prop]) + '&';
               }
               return url.substring(0, url.length - 1)
           }
           ALApiService.getFileUrl = function(){
             return MCK_FILE_URL;
           }
           ALApiService.initServerUrl = function (serverUrl) {
               MCK_BASE_URL = serverUrl;
           }
   
           /**
            * For backward compatibility
            */
           ALApiService.login = function (options) {
               ALApiService.connect(options);
           }
   
           /**
            * Login user to the chat session, must be done once in a session.
            * Usage Example:
            * Applozic.ALApiService.connect({data: {alUser: {userId: 'debug4', password: 'debug4', appVersionCode: 111, applicationId: 'applozic-sample-app'}}, success: function(response) {console.log(response);}, error: function() {}});
            */
           ALApiService.connect = function (options) {
               var appVersionCode = options.data.alUser.appVersionCode || ALApiService.DEFAULT_ENCRYPTED_APP_VERSION
               MCK_APP_ID = options.data.alUser.applicationId;
               MCK_BASE_URL = options.data.baseUrl ? options.data.baseUrl : "https://apps.applozic.com";
               MCK_CUSTOM_UPLOAD_SETTINGS = options.data.alUser.fileupload;
               options.data.alUser.appVersionCode = appVersionCode;
               ALApiService.ajax({
                   url: MCK_BASE_URL + INITIALIZE_APP_URL,
                   skipEncryption: true,
                   type: 'post',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   data: JSON.stringify(options.data.alUser),
                   contentType: 'application/json',
                   headers: {
                       'Application-Key': MCK_APP_ID
                   },
                   success: function (response) {
                       AUTH_CODE = btoa(response.userId + ':' + response.deviceKey);
                       DEVICE_KEY = response.deviceKey;
                       ACCESS_TOKEN = options.data.alUser.password;
                       APP_MODULE_NAME = options.data.alUser.appModuleName;
                       ALApiService.AUTH_TOKEN = response.authToken;
                       ALApiService.setAjaxHeaders(AUTH_CODE, MCK_APP_ID, response.deviceKey, options.data.alUser.password, options.data.alUser.appModuleName);
                       ALApiService.setEncryptionKeys(response.encryptionKey, response.userEncryptionKey);
                       typeof response === "object" && (response.appVersionCode = appVersionCode);
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           },
           ALApiService.addRequestHeaders = function (request) {            
               if (ALApiService.AUTH_TOKEN) {
                   request.setRequestHeader("X-Authorization", ALApiService.AUTH_TOKEN);
               } else {
                   if (AUTH_CODE) {
                       request.setRequestHeader("Authorization", "Basic " + AUTH_CODE);
                       request.setRequestHeader("Application-User", "Basic " + AUTH_CODE);
                   }
                   if (DEVICE_KEY) {
                       request.setRequestHeader("Device-Key", DEVICE_KEY);
                   }
                   if (ACCESS_TOKEN) {
                       request.setRequestHeader("Access-Token", ACCESS_TOKEN);
                   }
                   if (APP_MODULE_NAME) {
                       request.setRequestHeader("App-Module-Name", APP_MODULE_NAME);
                   }
                   request.setRequestHeader("UserId-Enabled", true);
               }
               request.setRequestHeader("Application-Key", MCK_APP_ID);
           },
           ALApiService.getAttachmentHeaders = function () {
               var headers = {};
               if (ALApiService.AUTH_TOKEN) {
                   headers["X-Authorization"] = ALApiService.AUTH_TOKEN;
               } else {
                   headers = {
                       'UserId-Enabled': true,
                       'Authorization': "Basic " + AUTH_CODE,
                       "Application-User": "Basic " + AUTH_CODE,
                       'Application-Key': MCK_APP_ID,
                       'Device-Key': DEVICE_KEY
                   };
                   
                   if (ACCESS_TOKEN) {
                       headers['Access-Token'] = ACCESS_TOKEN;
                   }
               }
   
               return headers;
           },
           ALApiService.getEncryptionKey = function() {
               return ENCRYPTION_KEY;
           }
           ALApiService.setEncryptionKeys = function(encryptionKey, userEncryptionKey) {
               ENCRYPTION_KEY = encryptionKey;
               USER_ENCRYPTION_KEY = userEncryptionKey;
           },
           
           ALApiService.setAjaxHeaders = function (authcode, appId, devKey, accToken, modName) {
               MCK_APP_ID = appId;
               AUTH_CODE = authcode;
               DEVICE_KEY = devKey;
               ACCESS_TOKEN = accToken;
               APP_MODULE_NAME = modName;
           },
           ALApiService.ajax = function (options) {
   
               function extend() {
                   for (var i = 1; i < arguments.length; i++)
                       for (var key in arguments[i])
                           if (arguments[i].hasOwnProperty(key))
                               arguments[0][key] = arguments[i][key];
                   return arguments[0];
               }
   
               var reqOptions = extend({}, {}, options);
               if (!options.skipEncryption && ENCRYPTION_KEY) {
   
                   if (reqOptions.type.toLowerCase() === 'post') {
                       reqOptions.data = mckUtils.encrypt(options.data, ENCRYPTION_KEY);
                   }
   
                   reqOptions.success = function (data) {
                       var res = mckUtils.decrypt(data, ENCRYPTION_KEY);
                       if (mckUtils.isJsonString(res)) {
                           options.success(JSON.parse(res));
                       } else {
                           options.success(res);
                       }
                   }
               }
               var request = new XMLHttpRequest();
               var responsedata;
               var asyn = true;
               var cttype;
               if (typeof reqOptions.async !== 'undefined' || options.async) {
                   asyn = reqOptions.async;
               }
   
               var typ = reqOptions.type.toUpperCase();
   
               if (typ === 'GET' && typeof reqOptions.data !== "undefined") {
                   reqOptions.url = reqOptions.url + "?" + reqOptions.data;
               }
   
               request.open(typ, reqOptions.url, asyn);
               if (typ === 'POST' || typ === 'GET') {
                   if (typeof reqOptions.contentType === 'undefined') {
                       cttype = 'application/x-www-form-urlencoded; charset=UTF-8';
                   } else {
                       cttype = reqOptions.contentType;
                   }
                   request.setRequestHeader('Content-Type', cttype);
               }
   
   
               //authorizationrequestheaders
               MCK_BASE_URL = MCK_BASE_URL ? MCK_BASE_URL : "https://apps.applozic.com";
               if (reqOptions.url.indexOf(MCK_BASE_URL) !== -1) {
                   ALApiService.addRequestHeaders(request);
               }
               if (reqOptions.url.indexOf(S3_MIGRATION_URL) !== -1) {
                   request.setRequestHeader("Application-Key", MCK_APP_ID);
               }
               if (typeof reqOptions.data === 'undefined') {
                   request.send();
               } else {
                   request.send(reqOptions.data);
               }
   
               request.onreadystatechange = function () {
                   if (request.readyState === 4) {
                       if (request.status === 200) {
                           //success
                           var contType = request.getResponseHeader("Content-Type");
                           if (typeof contType === "undefined" || contType === "null" || contType === null) {
                               contType = "";
                           }
   
                           if (contType.toLowerCase().indexOf("text/html") != -1) {
                               responsedata = request.responseXML;
                           } else if (contType.toLowerCase().indexOf("application/json") != -1) {
                               responsedata = JSON.parse(request.responseText);
                           } else {
                               responsedata = request.responseText;
                           }
                           reqOptions.success(responsedata);
                       } else if(request.status == 401){
                           reqOptions.error("UNAUTHORIZED_REQUEST");
                       } else {
                           //error
                           reqOptions.error(responsedata);
                       }
                   }
               };
           };
   
           /**
            * Get messages list.
            *
            * Usage Examples:
            *
            * Get latest messages group by users and groups:
            * Applozic.ALApiService.getMessages({data: {}, success: function(response) {console.log(response);}, error: function() {}});
            *
            * Messages between logged in user and a specific userId:
            * Applozic.ALApiService.getMessages({data: {userId: 'debug4'}, success: function(response) {console.log(response);}, error: function() {}});
            *
            * Messages between logged in user and a specific groupId:
            * Applozic.ALApiService.getMessages({data: {groupId: 5694841}, success: function(response) {console.log(response);}, error: function() {}});
            *
            * Messages history before a timestamp, for loading message list, pass the endTime = createdAt of the last message received in the message list api response
            * Applozic.ALApiService.getMessages({data: {userId: 'debug4', endTime: 1508177918406}, success: function(response) {console.log(response);}, error: function() {}});
            */
           ALApiService.getMessages = function (options) {
               if (options.data.userId || options.data.groupId) {
                   if (options.data.pageSize === 'undefined') {
                       options.data.pageSize = 30;
                   }
               } else if (typeof options.data.mainPageSize === 'undefined') {
                   options.data.mainPageSize = 60;
               }
               var data = getAsUriParameters(options.data);
               var response = new Object();
               ALApiService.ajax({
                   url: MCK_BASE_URL + MESSAGE_LIST_URL + "?" + data,
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   type: 'get',
                   success: function (data) {
                       response.status = "success";
                       response.data = data;
                       if (options.success) {
                           options.success(response);
                       }
                       return;
                   },
                   error: function (xhr, desc, err) {
                       response.status = "error";
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Usage Example:
        * Send message to a user (to)
            * Applozic.ALApiService.sendMessage({data: {message: {"type":5,"contentType":0,"message":"hi","to":"debug4","metadata":{},"key":"mpfj2","source":1}}, success: function(response) {console.log(response);}, error: function() {}});
            * Send message to a group using groupId
            * Applozic.ALApiService.sendMessage({data: {message: {"type":5,"contentType":0,"message":"hi","groupId":"group-1","metadata":{},"key":"mpfj2","source":1}}, success: function(response) {console.log(response);}, error: function() {}});
            * Send message to a group using clientGroupId
            * Applozic.ALApiService.sendMessage({data: {message: {"type":5,"contentType":0,"message":"hi","clientGroupId":"group-1","metadata":{},"key":"mpfj2","source":1}}, success: function(response) {console.log(response);}, error: function() {}});
        * type: 5 - Sent Message, 4 - Received Message
            * contentType: 0 - Standard Chat Message
            * to: userId to whom the message is to be sent
            * metadata: Additional key value pairs
            * source (optional): 1 - WEB, 5 - DESKTOP_BROWSER, 6 - MOBILE_BROWSER
            */
           ALApiService.sendMessage = function (options) {
               ALApiService.ajax({
                   type: 'POST',
                   url: MCK_BASE_URL + MESSAGE_SEND_URL,
                   global: false,
                   data: JSON.stringify(options.data.message),
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Send delivery report for a message.
            * Usage Example:
            * Applozic.ALApiService.sendDeliveryUpdate({data: {key: '5-f4c7860c-684a-4204-942d-2ccd2375f4a0-1508588649594'}, success: function(response) {console.log(response);}, error: function() {}});
            */
           ALApiService.sendDeliveryUpdate = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + MESSAGE_DELIVERY_UPDATE_URL,
                   data: "key=" + options.data.key,
                   global: false,
                   type: 'get',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Send read report for a message.
            * Usage Example:
            * Applozic.ALApiService.sendReadUpdate({data: {key: '5-f4c7860c-684a-4204-942d-2ccd2375f4a0-1508588649594'}, success: function(response) {console.log(response);}, error: function() {}});
            */
           ALApiService.sendReadUpdate = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + MESSAGE_READ_UPDATE_URL,
                   data: "key=" + options.data.key,
                   global: false,
                   type: 'get',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Delete message
            * Usage Example:
            * Applozic.ALApiService.deleteMessage({data: {key: '5-f4c7860c-684a-4204-942d-2ccd2375f4a0-1508588649594'}, success: function(response) {console.log(response);}, error: function() {}});
            */
           ALApiService.deleteMessage = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + MESSAGE_DELETE_URL + "?key=" + options.data.key,
                   global: false,
                   type: 'get',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Reply to a particular message
            * Usage Example:
            * Applozic.ALApiService.updateReplyMessage({data: {key: '5-f4c7860c-684a-4204-942d-2ccd2375f4a0-1508588649594'}, success: function(response) {console.log(response);}, error: function() {}});
            */
           ALApiService.updateReplyMessage = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + UPDATE_REPLY_MAP + "?keys=" + options.data.key,
                   type: 'get',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Delete conversation thread of the logged in user with a particular user or group.
            * Usage Example:
            *
            * Delete by userId
            * Applozic.ALApiService.deleteConversation({data: {userId: 'debug2'}, success: function(response) {console.log(response);}, error: function() {}});
            * Delete by groupId
            * Applozic.ALApiService.deleteConversation({data: {groupId: 5694841}, success: function(response) {console.log(response);}, error: function() {}});
            */
           ALApiService.deleteConversation = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + CONVERSATION_DELETE_URL,
                   type: "get",
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   data: getAsUriParameters(options.data),
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Create group
            * Usage Example:
            * Applozic.ALApiService.createGroup({data: {group: {"groupName":"test","users":[{'userId': 'debug3'}, {'userId': 'debug4'}],"type":2,"metadata":{"CREATE_GROUP_MESSAGE":":adminName created group :groupName","REMOVE_MEMBER_MESSAGE":":adminName removed :userName","ADD_MEMBER_MESSAGE":":adminName added :userName","JOIN_MEMBER_MESSAGE":":userName joined","GROUP_NAME_CHANGE_MESSAGE":"Group name changed to :groupName","GROUP_ICON_CHANGE_MESSAGE":"Group icon changed","GROUP_LEFT_MESSAGE":":userName left","DELETED_GROUP_MESSAGE":":adminName deleted group","GROUP_USER_ROLE_UPDATED_MESSAGE":":userName is :role now","GROUP_META_DATA_UPDATED_MESSAGE":"","ALERT":"","HIDE":""}} }, success: function(response) {console.log(response);}, error: function() {}});
            */
           ALApiService.createGroup = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + GROUP_CREATE_URL,
                   global: false,
                   data: JSON.stringify(options.data.group),
                   type: 'post',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Get groups list.
            * Usage Example:
            * Applozic.ALApiService.loadGroups({success: function(response) {console.log(response);} });
            */
           ALApiService.loadGroups = function (options) {
               if (options.baseUrl) {
                   MCK_BASE_URL = options.baseUrl;
               }
               ALApiService.ajax({
                   url: MCK_BASE_URL + GROUP_LIST_URL,
                   type: 'get',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
           /**
            * Get groups info.
            * Usage Example:
            * Applozic.ALApiService.getGroupInfo({data:{group:{groupId:"237437"}}, success: function(response){console.log(response);}, error: function() {}});
            */
           ALApiService.getGroupInfo = function (options) {
               var groupId = (options.data.groupId) ? "?groupId=" + options.data.groupId : "?clientGroupId=" + options.data.clientGroupId;
               ALApiService.ajax({
                   url: MCK_BASE_URL + GROUP_INFO_URL + groupId,
                   type: 'get',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
           /**
             * Add Group Member to Group.
             * Usage Example:
             * Applozic.ALApiService.addGroupMember({data:{group:{"userId":"user unique identifier",
                                                         "clientGroupId":"group unique identifier" }},
                                                          success: function(response) {console.log(response);}, error: function() {} });
             */
           ALApiService.addGroupMember = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + GROUP_ADD_MEMBER_URL,
                   type: 'POST',
                   data: JSON.stringify(options.data.group),
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Remove Group Member from Group.
            * Usage Example:
            * Applozic.ALApiService.removeGroupMember({data:{group:{"userId":"user unique identifier ",
                                                        "clientGroupId":"group unique identifier" }},
                                                         success: function(response) {console.log(response);}, error: function() {} });
            */
   
           ALApiService.removeGroupMember = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + GROUP_REMOVE_MEMBER_URL,
                   type: 'POST',
                   data: JSON.stringify(options.data),
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Group Left
            * Usage Example:
            * Applozic.ALApiService.groupLeave({data:{group:{"clientGroupId":"group unique identifier" }},
                                                         success: function(response) {console.log(response);}, error: function() {} });
            */
   
           ALApiService.groupLeave = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + GROUP_LEFT_URL,
                   type: 'POST',
                   data: JSON.stringify(options.data),
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
           * Group Update
           * Usage Example:
           * Applozic.ALApiService.groupUpdate({data:{group:{groupId:groupId or clientGroupId:"clientGroupId",newName:"New name of group",imageUrl:"image url of the group"}},
                                                        success: function(response) {console.log(response);}, error: function() {} });
           */
   
           ALApiService.groupUpdate = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + GROUP_UPDATE_URL,
                   type: 'POST',
                   data: JSON.stringify(options.data),
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response, options.data);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
           * Check if user is part of a Group
           * Usage Example:
           * Applozic.ALApiService.isUserPresentInGroup({data:{clientGroupId:"clientGroupId",userId:"userId"},
                                                        success: function(response) {console.log(response);}, error: function() {} });
           */
   
           ALApiService.isUserPresentInGroup = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + GROUP_IS_USER_PRESENT_URL + '?userId=' + options.data.userId + '&clientGroupId=' + options.data.clientGroupId,
                   type: 'get',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Group Users Count
            * Usage Example:
            * Applozic.ALApiService.groupUserCount({data:{clientGroupId:["clientGroupId1","clientGroupId2"]},
                                                         success: function(response) {console.log(response);}, error: function() {} });
            */
   
           ALApiService.groupUserCount = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + GROUP_USER_COUNT_URL + '?clientGroupIds=' + options.data.clientGroupId,
                   type: 'get',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
           * Group Delete
           * Usage Example:
           * Applozic.ALApiService.groupDelete({data:{clientGroupId:"clientGroupId"},
                                                        success: function(response) {console.log(response);}, error: function() {} });
           */
   
           ALApiService.groupDelete = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + GROUP_LEFT_URL + "?clientGroupId=" + options.data.clientGroupId,
                   type: 'GET',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
           /**
            * Create User FriendList
            * Usage Example:
            * Applozic.ALApiService.createUserFriendList({data:{groupName:"groupName"},
                                                         success: function(response) {console.log(response);}, error: function() {} });
            */
           ALApiService.createUserFriendList = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + FRIEND_LIST_URL + options.data.group.groupName + "/add/",
                   type: 'POST',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   data: JSON.stringify(options.data.group.groupMemberList),
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                           ALStorage.setFriendListGroupName(options.data.group.groupName);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           ALApiService.createOpenFriendList = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + FRIEND_LIST_URL + options.data.group.groupName + "/add/members",
                   type: 'POST',
                   data: JSON.stringify(options.data.group),
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                           ALStorage.setFriendListGroupName(options.data.group.groupName);
                           ALStorage.setFriendListGroupType(options.data.group.type);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
           /**
            * Get FriendList
            * Usage Example:
            * Applozic.ALApiService.getFriendList({data:{groupName:"groupName",type: 9,
                                                   groupMemberList: ["debug2", "debug3","videocall-1"]},
                                                         success: function(response) {console.log(response);}, error: function() {} });
            */
           ALApiService.getFriendList = function (options) {
               var getFriendListUrl = (options.data.type !== "null") ? "/get?groupType=9" : "/get";
               options.data.url = options.data.url ? options.data.url : getFriendListUrl;
               ALApiService.ajax({
                   url: MCK_BASE_URL + FRIEND_LIST_URL + options.data.groupName + options.data.url,
                   type: 'GET',
                   async: (typeof options.data.async !== 'undefined') ? options.data.async : true,
                   global: false,
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
                   * remove user from friendList
                   * Usage Example:
                   * Applozic.ALApiService.removeUserFromFriendList({group:{groupName:"groupname",userId:"userid",type:9},
                                                                success: function(response) {console.log(response);}, error: function() {}});
                   */
           ALApiService.removeUserFromFriendList = function (options) {
               var getFriendListUrl = (options.group.type) ? "/remove?userId=" + options.group.userId + "&groupType=9" : "/remove?userId=" + options.group.userId;
               ALApiService.ajax({
                   url: MCK_BASE_URL + FRIEND_LIST_URL + options.group.groupName + getFriendListUrl,
                   type: 'Post',
                   contentType: 'application/json',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * delete friendList
            * Usage Example:
            * Applozic.ALApiService.deleteFriendList({group:{groupName:"groupname",userId:"userid",type:9},
                                                         success: function(response) {console.log(response);}, error: function() {}});
            */
           ALApiService.deleteFriendList = function (options) {
               var getFriendListUrl = (options.group.type) ? "/delete?groupType=9" : "/delete";
               ALApiService.ajax({
                   url: MCK_BASE_URL + FRIEND_LIST_URL + options.group.groupName + getFriendListUrl,
                   type: "GET",
                   contentType: "application/json",
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           };
           /**
           * Get User Detail
           * Usage Example:
           * Applozic.ALApiService.getUserDetail({data:{userIdList:["userId1","userId2"]},
                                                        success: function(response) {console.log(response);}, error: function() {} });
           */
           ALApiService.getUserDetail = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + GET_USER_DETAIL_URL,
                   data: JSON.stringify({
                       userIdList: options.data
                   }),
                   type: 'POST',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
           /**
           * Update User Detail
           * Usage Example:
           * Applozic.ALApiService.updateUserDetail({data:{email:"user email", displayName:"user display name",imageLink:"User profile image url", statusMessage:"status Message"},
                                                        success: function(response) {console.log(response);}, error: function() {} });
           */
           ALApiService.updateUserDetail = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + UPDATE_USER_DETAIL_URL,
                   data: JSON.stringify(options.data),
                   type: 'POST',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
           /**
                    * Update Password
                    * Usage Example:
                    * Applozic.ALApiService.updatePassword({data:{oldPassword:"oldPassword", newPassword:"newPassword"},
                                                                 success: function(response) {console.log(response);}, error: function() {} });
                    */
           ALApiService.updatePassword = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + UPDATE_PASSWORD_URL + "?oldPassword=" + options.data.oldPassword + "&newPassword=" + options.data.newPassword,
                   type: 'GET',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Get Contact List
            * Usage Example:
            * Applozic.ALApiService.getContactList({url:"url",
                                                         success: function(response) {console.log(response);}, error: function() {} });
            */
           ALApiService.getContactList = function (options) {
               var baseurl = options.baseUrl ? options.baseUrl : MCK_BASE_URL;
               ALApiService.ajax({
                   url: baseurl+ options.url,
                   type: 'GET',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
           * One to One Mute
           * Usage Example:
           * Applozic.ALApiService.userChatMute({data:{userId:"userId",notificationAfterTime:"Time till you want to mute in millisceconds"},
                                                        success: function(response) {console.log(response);}, error: function() {} });
           */
   
           ALApiService.userChatMute = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + ONE_TO_ONE_MUTE_URL + "?userId=" + options.data.userId + "&notificationAfterTime=" + options.data.notificationAfterTime,
                   type: 'post',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * Group Mute
            * Usage Example:
            * Applozic.ALApiService.groupMute({data:{clientGroupId:clientGroupId,notificationAfterTime:"Time till you want to mute in millisceconds"},
                                                         success: function(response) {console.log(response);}, error: function() {} });
            */
   
           ALApiService.groupMute = function (options) {
               var group = {};
               group.clientGroupId = options.data.clientGroupId;
               group.notificationAfterTime = options.data.notificationAfterTime;
               ALApiService.ajax({
                   url: MCK_BASE_URL + GROUP_MUTE_URL,
                   type: 'post',
                   data: JSON.stringify(group),
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
           * Mute User Sync
           * Usage Example:
           * Applozic.ALApiService.syncMuteUserList({success: function(response) {console.log(response);}, error: function() {} });
           */
   
           ALApiService.syncMuteUserList = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + SYNC_MUTE_USER_URL,
                   type: 'get',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
                    * Block User
                    * Usage Example:
                    * Applozic.ALApiService.blockUser({data:{userId:"userId",isBlock:true},
                                                                 success: function(response) {console.log(response);}, error: function() {} });
                    */
   
           ALApiService.blockUser = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + USER_BLOCK_URL + "?userId=" + options.data.userId + "&block=" + options.data.isBlock,
                   type: 'GET',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
           /**
            * UnBlock User
            * Usage Example:
            * Applozic.ALApiService.unBlockUser({data:{userId:"userId"},
                                                         success: function(response) {console.log(response);}, error: function() {} });
            */
   
           ALApiService.unBlockUser = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + USER_UNBLOCK_URL + "?userId=" + options.data.userId,
                   type: 'GET',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   global: false,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
   
           /**
                   * SendConversationCloseUpdate
                   * Usage Example:
                   window.Applozic.ALApiService.sendConversationCloseUpdate({conversationId:conversationId, success: function (result) {}, error: function () {} });
                   */
   
           ALApiService.sendConversationCloseUpdate = function (options) {
               var data = "id=" + options.conversationId;
               ALApiService.ajax({
                   url: MCK_BASE_URL + CONVERSATION_CLOSE_UPDATE_URL,
                   data: data,
                   global: false,
                   type: 'get',
                   success: function () { },
                   error: function () { }
               });
           };
   
           /**
            * FileUpload
            * Usage Example:
             window.Applozic.ALApiService.fileUpload({data:{ url: url} , success: function (result) {}, error: function () { } });
            */
   
           ALApiService.fileUpload = function (options) {
               ALApiService.ajax({
                   type: "GET",
                   skipEncryption: true,
                   url: options.data.url,
                   global: false,
                   data: "data=" + new Date().getTime(),
                   crosDomain: true,
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
   
           /**
           * * Send Attachment
           * Usage Example:
           * var file =document.getElementById("photo").files[0];
           * var message= {"type":5,"contentType":0,"message":"","to/groupId":"debug4","metadata":{},"source":1};
           * window.Applozic.ALApiService.sendAttachment({data:{ file: file,messagePxy:message} , success: function (result) {}, error: function () { } });
          */
   
         ALApiService.sendAttachment = function (options) {
           if(MCK_CUSTOM_UPLOAD_SETTINGS === "awsS3Server"){
             window.Applozic.ALApiService.sendAttachmentToAWS(options);
           }
           else if (MCK_CUSTOM_UPLOAD_SETTINGS ===	"googleCloud") {
             window.Applozic.ALApiService.sendAttachmentToCloud(options);
           }
           else {
             window.Applozic.ALApiService.sendAttachmentToGoogleServer(options);
           }
         };
   
         ALApiService.sendAttachmentToGoogleServer = function(options){
           var xhr = new XMLHttpRequest();
           var attachmentURL = MCK_FILE_URL + FILE_UPLOAD_URL;
           ALApiService.ajax({
               type: "GET",
               skipEncryption: true,
               url: (typeof options.url !== 'undefined') ? options.url : attachmentURL,
               global: false,
               data: "data=" + new Date().getTime(),
               crosDomain: true,
               success: function (response) {
                 xhr.addEventListener('load', function (e) {
                   var file = JSON.parse(this.responseText);
                     var message = options.data.messagePxy;
                     if (file) {
                         message.fileMeta = file.fileMeta;
                         Applozic.ALApiService.sendMessage({
                             data: {
                                 message: message
                             },
                             success: function (response) {
                                 if (options.success) {
                                     response.fileMeta = file.fileMeta;
                                     options.success(response);
                                 }
                             },
                             error: function (response) {
                                 if (options.error) {
                                     options.error(response);
                                 }
                             }
                         });
                     }
                   });
                   var data = new FormData();
                   var file = options.data.file;
                   data.append('files[]', file);
                   xhr.open("POST", response, true);
                   ALApiService.addRequestHeaders(xhr);
                   xhr.send(data);
                   },
                 error: function (response) {
                   if (options.error) {
                       options.error(response);
                   }
                 }
           });
         };
   
         ALApiService.sendAttachmentToAWS = function(options){
           var data = new FormData();
           var xhr = new XMLHttpRequest();
           var attachmentURL = MCK_BASE_URL + ATTACHMENT_UPLOAD_URL;
           xhr.addEventListener('load', function (e) {
               var file = JSON.parse(this.responseText);
               var message = options.data.messagePxy;
               if (file) {
                   message.fileMeta = file;
                   Applozic.ALApiService.sendMessage({
                       data: {message : message},
                       success: function (response) {
                           if (options.success) {
                               response.fileMeta = file;
                               options.success(response);
                           }
                       },
                       error: function (response) {
                           if (options.error) {
                               options.error(response);
                           }
                       }
                   });
                }
             });
             data.append("file", options.data.file);
             xhr.open("post", attachmentURL, true);
             ALApiService.addRequestHeaders(xhr);
             xhr.send(data);
         };
   
         ALApiService.sendAttachmentToCloud = function(options){
           var data = new FormData();
           var xhr = new XMLHttpRequest();
           var attachmentURL = (typeof options.cloudUploadUrl !== 'undefined') ? options.cloudUploadUrl : MCK_CUSTOM_URL + CUSTOM_FILE_UPLOAD_URL;
           xhr.addEventListener('load', function (e) {
             var file = JSON.parse(this.responseText);
             var message = options.data.messagePxy;
               if (file) {
                   message.fileMeta = file.fileMeta;
                   Applozic.ALApiService.sendMessage({
                       data: {message : message},
                       success: function (response) {
                           if (options.success) {
                               options.fileMeta = file.fileMeta;
                               options.success(response);
                           }
                       },
                       error: function (response) {
                           if (options.error) {
                               options.error(response);
                           }
                       }
                   });
               }
             });
             data.append("files[]", options.data.file);
             xhr.open("post", attachmentURL, true);
             ALApiService.addRequestHeaders(xhr);
             xhr.send(data);
           };
           /**
   
           /**
                    * DeleteFileMeta
                    * Usage Example:
                     window.Applozic.ALApiService.deleteFileMeta({data:{url:url} , success: function (result) {}, error: function () { } });
                    */
           ALApiService.deleteFileMeta = function (options) {
               ALApiService.ajax({
                   url: options.data.url,
                   skipEncryption: true,
                   type: 'post',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           };
   
           /**
                    * addMessageInbox
                    * Usage Example:
                     window.Applozic.ALApiService.addMessageInbox({data:{sender:"sender",messageContent:"Welcome"} , success: function (result) {}, error: function () { } });
                    */
   
           ALApiService.addMessageInbox = function (options) {
               ALApiService.ajax({
                   type: 'GET',
                   url: MCK_BASE_URL + MESSAGE_ADD_INBOX_URL,
                   global: false,
                   data: 'sender=' + encodeURIComponent(options.data.sender) + "&messageContent=" + encodeURIComponent(options.data.messageContent),
                   contentType: 'text/plain',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           };
           /**
                    * conversationReadUpdate
                    * Usage Example:
                     window.Applozic.ALApiService.conversationReadUpdate({data: "groupId=groupId"/"userId=encodeURIComponent(userId)" , success: function (result) {}, error: function () { } });
                    */
   
           ALApiService.conversationReadUpdate = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + CONVERSATION_READ_UPDATE_URL,
                   data: options.data,
                   global: false,
                   type: 'get',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.success(response);
                       }
                   }
               });
           }
   
           /**
            * sendSubscriptionIdToServer
            * Usage Example:
             window.Applozic.ALApiService.sendSubscriptionIdToServer({data: {"subscriptionId":subscriptionId}, success: function (result) {}, error: function () { } });
            */
   
           ALApiService.sendSubscriptionIdToServer = function (options) {
               var subscriptionId = options.data.subscriptionId;
               ALApiService.ajax({
                   url: MCK_BASE_URL + MCK_SW_REGISTER_URL,
                   skipEncryption: true,
                   type: 'post',
                   data: 'registrationId=' + subscriptionId,
                   success: function (data) { },
                   error: function (xhr, desc, err) {
                       if (xhr.status === 401) {
                           ALStorage.clearSessionStorageElements();
                           console.log('Please reload page.');
                       }
                   }
               });
           }
   
           /**
                   * getTopicId
                   * Usage Example:
                    window.Applozic.ALApiService.getTopicId({data: {"conversationId":conversationId}, success: function (result) {}, error: function () { } });
                   */
   
           ALApiService.getTopicId = function (options) {
               var conversationId = "id=" + options.data.conversationId;
               ALApiService.ajax({
                   url: MCK_BASE_URL + TOPIC_ID_URL + "?" + conversationId,
                   type: 'get',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.success(response);
                       }
                   }
               });
           }
   
           /**
                   * getContactDisplayName
                   * Usage Example:
                    window.Applozic.ALApiService.getContactDisplayName({data: {"userIdArray":userIdArray}, success: function (result) {}, error: function () { } });
                   */
   
           ALApiService.getContactDisplayName = function (options) {
               var userIdArray = options.data.userIdArray;
               if (userIdArray.length > 0 && userIdArray[0]) {
                   var data = '';
                   var uniqueUserIdArray = userIdArray.filter(function (item, pos) {
                       return userIdArray.indexOf(item) === pos;
                   });
                   for (var i = 0; i < uniqueUserIdArray.length; i++) {
                       var userId = uniqueUserIdArray[i];
                       if (typeof MCK_CONTACT_NAME_MAP[userId] === 'undefined') {
                           data += "userIds=" + encodeURIComponent(userId) + "&";
                       }
                   }
                   if (data.lastIndexOf("&") === data.length - 1) {
                       data = data.substring(0, data.length - 1);
                   }
                   if (data) {
                       ALApiService.ajax({
                           url: MCK_BASE_URL + CONTACT_NAME_URL,
                           data: data,
                           global: false,
                           type: 'get',
                           success: function (response) {
                               if (options.success) {
                                   options.success(response);
                               }
                           },
                           error: function (response) {
                               if (options.error) {
                                   options.success(response);
                               }
                           }
                       });
                   }
               }
           }
   
           /**
                    * getUserStatus
                    * Usage Example:
                     window.Applozic.ALApiService.getUserStatus({success: function (result) {}, error: function () { } });
                    */
   
           ALApiService.getUserStatus = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + USER_STATUS_URL,
                   type: 'get',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.success(response);
                       }
                   }
               });
           }
   
           /**
                   * fetchConversationByTopicId
                   * Usage Example:
                    window.Applozic.ALApiService.fetchConversationByTopicId({data: {"topicId":topicId,"tabId":tabId,"pageSize":pageSize,"clientGroupId":clientGroupId,"isGroup":isGroup}, success: function (result) {}, error: function () { } });
                   */
   
           ALApiService.fetchConversationByTopicId = function (options) {
               var reqdata = 'topic=' + options.data.topicId;
               if (options.data.tabId) {
                   reqdata += ('' + options.data.isGroup === 'true') ? '&groupId=' + options.data.tabId : '&userId=' + encodeURIComponent(options.data.tabId);
               } else if (options.data.clientGroupId) {
                   reqdata += '&clientGroupId=' + options.data.clientGroupId;
               } else {
                   return false;
               }
               if (options.data.pageSize) {
                   reqdata += '&pageSize=' + options.data.pageSize;
               }
               ALApiService.ajax({
                   url: MCK_BASE_URL + CONVERSATION_FETCH_URL,
                   data: reqdata,
                   type: 'get',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.success(response);
                       }
                   }
               });
           }
   
   
           /**
           * getConversationId
           * Usage Example:
            window.Applozic.ALApiService.getConversationId({data: {"topicId":topicId,"userId":userId,"status":status,"isGroup":isGroup,"topicDetail":topicDetail}, success: function (result) {}, error: function () { } });
           */
   
           ALApiService.getConversationId = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + CONVERSATION_ID_URL,
                   global: false,
                   data: w.JSON.stringify(options.data),
                   type: 'post',
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.success(response);
                       }
                   }
               });
           }
   
           /**
          * registerClientApi
          * Usage Example:
          * var userPxy = {
             'applicationId': 'APPLICATION_KEY', // Replace APPLICATION_KEY with the Application key received after Signup from https://www.applozic.com/signup.html
             'userId': 'USER_ID', // Replace USER_ID with the user's unique identifier
             'registrationId': 'PUSH_NOTIFICATION_TOKEN', //Replace with FCM push notification token for Android devices and APNS push notification token for iOS devices
             'pushNotificationFormat' : '1', //1 for PhoneGap, 2 for Ionic
             'deviceType': '1',       //1 for Android, 4 for iOS
             'appVersionCode': '111'
           };
           window.Applozic.ALApiService.registerClientApi({data: {"userPxy":userPxy}, success: function (result) {}, error: function () { } });
          */
   
   
           ALApiService.registerClientApi = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + REGISTER_CLIENT_URL,
                   type: 'post',
                   data: JSON.stringify(options.data.userPxy),
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.success(response);
                       }
                   }
               });
           }
   
           /**
             * logout
             * Usage Example :
             * Applozic.ALApiService.logout({success: function(response) {console.log(response);} , error: function() {}})
             */
           ALApiService.logout = function (options) {
               ALApiService.ajax({
                   url: MCK_BASE_URL + LOGOUT,
                   type: 'post',
                   async: (typeof options.async !== 'undefined') ? options.async : true,
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.error(response);
                       }
                   }
               });
           }
   
   
             /*
             * getUsersByRole
             * Usage Example:
             window.Applozic.ALApiService.getUsersByRole({data: {"startIndex":0,"pageSize":30,"roleNameList":["APPLICATION_WEB_ADMIN","ADMIN"]}, success: function (result) {console.log(result);}, error: function () { } });
             */
           ALApiService.getUsersByRole = function (options) {
               var data = getAsUriParameters(options.data);
               ALApiService.ajax({
                   url: MCK_BASE_URL + USER_FILTER_BY_ROLE + "?" + data,
                   global: false,
                   type: 'get',
                   contentType: 'application/json',
                   success: function (response) {
                       if (options.success) {
                           options.success(response);
                       }
                   },
                   error: function (response) {
                       if (options.error) {
                           options.success(response);
                       }
                   }
               });
           }
   
             /*
             * pushNotificationLogout
             * Usage Example :
             * Applozic.ALApiService.pushNotificationLogout({success: function(response) {console.log(response);} , error: function() {}})
             */
           ALApiService.pushNotificationLogout= function (options) {
           ALApiService.ajax({
               url: MCK_BASE_URL + PUSH_NOTIFICATION_LOGOUT,
               type: 'post',
               async: (typeof options.async !== 'undefined') ? options.async : true,
               contentType: 'application/json',
               success: function (response) {
                   if (options.success) {
                       options.success(response);
                   }
               },
               error: function (response) {
                   if (options.error) {
                       options.error(response);
                   }
               }
           });
         }
           return ALApiService;
       }
   
       //define globally if it doesn't already exist
       if (typeof (ALApiService) === 'undefined') {
           window.Applozic.ALApiService = define_ALApiService();
       }
       else {
           console.log("ALApiService already defined.");
       }
   })(window);
   
   (function(window){
       'use strict';
       function define_ALSocket() {
           var ALSocket = {};
           var MCK_APP_ID;
           ALSocket.events = {};
           var subscriber = null;
           var encryptedSubscriber = null;
           ALSocket.stompClient = null;
           var TYPING_TAB_ID = '';
           ALSocket.typingSubscriber = null;
           ALSocket.supportChannelSubscriber = null;  
           ALSocket.openGroupSubscriber = [];
           var checkConnectedIntervalId;
           var sendConnectedStatusIntervalId;
           var OPEN_GROUP_SUBSCRIBER_MAP=[];
           ALSocket.mck_typing_status = 0;
           var MCK_TYPING_STATUS;
           var SOCKET = '';
           var MCK_WEBSOCKET_URL = 'socket.applozic.com';
           var MCK_WEBSOCKET_PORT = "80";
           ALSocket.MCK_TOKEN;
           ALSocket.USER_DEVICE_KEY;
           ALSocket.USER_ENCRYPTION_KEY;
           ALSocket.ENCRYPTION_KEY;
           ALSocket.APP_VERSION_CODE;
           ALSocket.AUTH_TOKEN;
           var mckUtils = new MckUtils();
           var isReconnectAvailable = false;
   
           /**
            * var events = {
                   'onConnectFailed': function() {},
                   'onConnect': function() {},
                   'onMessageDelivered': function() {},
                   'onMessageRead': function() {},
                   'onMessageDeleted': function() {},
                   'onConversationDeleted': function() {},
                   'onUserConnect': function() {},
                   'onUserDisconnect': function() {},
                   'onConversationReadFromOtherSource': function() {},
                   'onConversationRead': function() {},
                   'onMessageReceived': function() {},
                   'onMessageSentUpdate': function() {},
                   'onMessageSent': function() {},
                   'onUserBlocked': function() {},
                   'onUserUnblocked': function() {},
                   'onUserActivated': function() {},
                   'onUserDeactivated': function() {},
                   'connectToSocket': function() {},
                   'onMessage': function(resp) { console.log(resp); },
                   'onTypingStatus': function(resp) {}
                  };
           window.Applozic.ALSocket.init("applozic-sample-app", "https://apps.applozic.com", events);
           */
           ALSocket.init = function(appId, data, _events) {
               var LOGIN_DATA = {};
               if (appId) {
                   MCK_APP_ID = appId;
               }
               if (typeof data !== "undefined") {
                   ALSocket.MCK_TOKEN = data.token;
                   ALSocket.APP_VERSION_CODE = data.appVersionCode;
                   ALSocket.USER_DEVICE_KEY = data.deviceKey;
                   ALSocket.ENCRYPTION_KEY = data.encryptionKey;
                   if (data.encryptionKey || parseInt(data.appVersionCode) >= window.Applozic.ALApiService.DEFAULT_ENCRYPTED_APP_VERSION) {
                       ALSocket.USER_ENCRYPTION_KEY = data.userEncryptionKey;
                   }
                   MCK_WEBSOCKET_URL = data.websocketUrl;
   
                   if (typeof data.websocketPort === "undefined") {
                       MCK_WEBSOCKET_PORT = (!mckUtils.startsWith(MCK_WEBSOCKET_URL, "https")) ? "15674" : "15675";
                   } else {
                       MCK_WEBSOCKET_PORT = data.websocketPort;
                   }
                   ALSocket.AUTH_TOKEN = data.authToken;
                   LOGIN_DATA.socketUserId = data.appId || appId;
                   LOGIN_DATA.socketPassword = data.authToken;
               }
               ALSocket.events = _events;
               if (typeof MCK_WEBSOCKET_URL !== 'undefined' && navigator.onLine) {
                   if (window.WebSocket) {
                       MCK_WEBSOCKET_URL = MCK_WEBSOCKET_URL.replace("https://", "");
                       SOCKET = new WebSocket("wss://" + MCK_WEBSOCKET_URL + ":" + MCK_WEBSOCKET_PORT+ "/ws");
                       ALSocket.stompClient = Stomp.over(SOCKET);
                       ALSocket.stompClient.heartbeat.outgoing = 10000;
                       ALSocket.stompClient.heartbeat.incoming = 0;
                       ALSocket.stompClient.reconnect_delay = 30000;
                       ALSocket.stompClient.debug = null;
                       ALSocket.stompClient.onclose = function() {
                           ALSocket.disconnect();
                       };
                       ALSocket.stompClient.connect(LOGIN_DATA.socketUserId, LOGIN_DATA.socketPassword, ALSocket.onConnect, ALSocket.onError, '/');
                       window.addEventListener("beforeunload", function(e) {
                           var check_url;
                           (e.target.activeElement) && (check_url=e.target.activeElement.href);
                           if(!check_url || 0 === check_url.length){
                               ALSocket.disconnect();
                           }
                       });
                   }
               }
           };
           ALSocket.setOnline = function () {
               if (typeof window.Applozic.ALSocket !== 'undefined') {
                   window.Applozic.ALSocket.sendStatus(1);
               }
           };
           ALSocket.checkConnected = function(isFetchMessages) {
               if (ALSocket.stompClient.connected) {
                   if (checkConnectedIntervalId) {
                       clearInterval(checkConnectedIntervalId);
                   }
                   if (sendConnectedStatusIntervalId) {
                       clearInterval(sendConnectedStatusIntervalId);
                   }
                   // Below code will check that socket is connected or not in every 1 minute.
                   checkConnectedIntervalId = setInterval(function() {
                       ALSocket.connectToSocket(isFetchMessages);
                   }, 60000);
                   // Below code will send online status to server in every 2 minutes.
                   sendConnectedStatusIntervalId = setInterval(function() {
                       ALSocket.sendStatus(1);
                   }, 120000);
               };
               ALSocket.connectToSocket(isFetchMessages);
           };
           ALSocket.connectToSocket = function(isFetchMessages) {
               if (typeof ALSocket.events.connectToSocket === "function") {
                   ALSocket.events.connectToSocket(isFetchMessages);
               }
           };
           ALSocket.stopConnectedCheck = function() {
               if (checkConnectedIntervalId) {
                   clearInterval(checkConnectedIntervalId);
               }
               if (sendConnectedStatusIntervalId) {
                   clearInterval(sendConnectedStatusIntervalId);
               }
               checkConnectedIntervalId = '';
               sendConnectedStatusIntervalId = '';
               ALSocket.disconnect();
           };
           ALSocket.disconnect = function() {
               if (ALSocket.stompClient && ALSocket.stompClient.connected) {
                   ALSocket.sendStatus(0);
                   ALSocket.stompClient.disconnect();
                   if (typeof SOCKET === "object") {
                       SOCKET.close();
                       SOCKET = '';
                   }
               }
           };
           ALSocket.unsubscibeToTypingChannel = function() {
               if (ALSocket.stompClient && ALSocket.stompClient.connected) {
                   if (ALSocket.typingSubscriber) {
                       if (ALSocket.mck_typing_status === 1) {
                           ALSocket.sendTypingStatus(0, TYPING_TAB_ID);
                       }
                       ALSocket.typingSubscriber.unsubscribe();
                   }
               }
               ALSocket.typingSubscriber = null;
           };
           ALSocket.unsubscibeToNotification = function() {
               if (ALSocket.stompClient && ALSocket.stompClient.connected) {
                   subscriber && subscriber.unsubscribe();
                   encryptedSubscriber && encryptedSubscriber.unsubscribe();
               }
               subscriber = encryptedSubscriber = null;
           };
           ALSocket.subscibeToTypingChannel = function(subscribeId) {
               if (ALSocket.stompClient && ALSocket.stompClient.connected) {
                   ALSocket.typingSubscriber = ALSocket.stompClient.subscribe("/topic/typing-" + MCK_APP_ID + "-" + subscribeId, ALSocket.onTypingStatus);
               } else {
                   ALSocket.reconnect();
               }
           };
           ALSocket.subscribeToSupportChannel = function(){
               if (ALSocket.stompClient && ALSocket.stompClient.connected) {
                   ALSocket.supportChannelSubscriber = ALSocket.stompClient.subscribe("/topic/support-channel-" + MCK_APP_ID, ALSocket.onUserStatusUpdate);
               } else {
                   ALSocket.reconnect();
               }
           };
           ALSocket.unsubscribeToSupportChannel = function(){
               if (ALSocket.stompClient && ALSocket.stompClient.connected) {
                   if (ALSocket.supportChannelSubscriber) {
                       ALSocket.supportChannelSubscriber.unsubscribe();
                   }
               }
               ALSocket.supportChannelSubscriber = null;
           }
           ALSocket.subscribeToOpenGroup = function(group) {
               console.log('adding subscription');
               if (ALSocket.stompClient && ALSocket.stompClient.connected) {
                   var subs = ALSocket.stompClient.subscribe("/topic/group-" + MCK_APP_ID + "-" + group.contactId, ALSocket.onOpenGroupMessage);
                   ALSocket.openGroupSubscriber.push(subs.id);
                   OPEN_GROUP_SUBSCRIBER_MAP[group.contactId] = subs.id;
               } else {
                   ALSocket.reconnect();
               }
           };
           ALSocket.sendTypingStatus = function (status, mck_typing_status, MCK_USER_ID, tabId) {
               ALSocket.mck_typing_status =mck_typing_status;
               if (ALSocket.stompClient && ALSocket.stompClient.connected) {
                   if (status === 1 && ALSocket.mck_typing_status === 1) {
                       ALSocket.stompClient.send('/topic/typing-' + MCK_APP_ID + "-" + TYPING_TAB_ID, {
                           "content-type": "text/plain"
                       }, MCK_APP_ID + "," + MCK_USER_ID + "," + status);
                   }
                   if (tabId) {
                       if (tabId === TYPING_TAB_ID && status === ALSocket.mck_typing_status && status === 1) {
                           return;
                       }
                       TYPING_TAB_ID = tabId;
                       ALSocket.stompClient.send('/topic/typing-' + MCK_APP_ID + "-" + tabId, {
                           "content-type": "text/plain"
                       }, MCK_APP_ID + "," + MCK_USER_ID + "," + status);
                       setTimeout(function() {
                           ALSocket.mck_typing_status = 0;
                       }, 60000);
                   } else if (status === 0) {
                       ALSocket.stompClient.send('/topic/typing-' + MCK_APP_ID + "-" + TYPING_TAB_ID, {
                           "content-type": "text/plain"
                       }, MCK_APP_ID + "," + MCK_USER_ID + "," + status);
                   }
                   ALSocket.mck_typing_status = status;
               }
           };
           ALSocket.onTypingStatus = function(resp) {
               if (typeof ALSocket.events.onTypingStatus === "function") {
                   ALSocket.events.onTypingStatus(resp);
               }
           };
           ALSocket.onUserStatusUpdate = function(resp){
               if (typeof ALSocket.events.onUserStatusUpdate === "function") {
                   ALSocket.events.onUserStatusUpdate(resp);
               }
           };
           ALSocket.reconnect = function() {
               if (isReconnectAvailable) {
                   isReconnectAvailable = false;
                   ALSocket.unsubscibeToTypingChannel();
                   ALSocket.unsubscibeToNotification();
                   ALSocket.unsubscribeToSupportChannel();
                   ALSocket.disconnect();
                   var data = {};
                   data.token = ALSocket.MCK_TOKEN ;
                   data.deviceKey = ALSocket.USER_DEVICE_KEY;
                   data.userEncryptionKey = ALSocket.USER_ENCRYPTION_KEY;
                   data.encryptionKey = ALSocket.ENCRYPTION_KEY;
                   data.websocketUrl = MCK_WEBSOCKET_URL;
                   data.websocketPort = MCK_WEBSOCKET_PORT;
                   data.authToken = ALSocket.AUTH_TOKEN;
                   ALSocket.init(MCK_APP_ID, data, ALSocket.events);
               }
           };
           ALSocket.onError = function(err) {
               console.log("Error in channel notification. " + err);
               if (typeof ALSocket.events.onConnectFailed === "function") {
                   setTimeout(function () {
                       ALSocket.events.onConnectFailed(err);
                       isReconnectAvailable = true;
                   }, 30000);
               }
           };
           ALSocket.sendStatus = function(status) {
               if (ALSocket.stompClient && ALSocket.stompClient.connected) {
                   ALSocket.stompClient.send('/topic/status-v2', {
                       "content-type": "text/plain"
                   }, ALSocket.MCK_TOKEN + "," + ALSocket.USER_DEVICE_KEY + "," + status);
               }
           };
           ALSocket.sendMessageStatus = function (messageKey, status, MCK_USER_ID) {
               if (ALSocket.stompClient && ALSocket.stompClient.connected) {
                   ALSocket.stompClient.send("/topic/message-status", {
                       "content-type": "text/plain"
                   }, MCK_USER_ID + "," + messageKey + "," + status);
               }
           };
           ALSocket.onConnect = function() {
               isReconnectAvailable = true;
               if (ALSocket.stompClient.connected) {
                   (subscriber || encryptedSubscriber) && ALSocket.unsubscibeToNotification();
                   ALSocket.handleOnConnect();
               } else {
                   setTimeout(function() {
                       ALSocket.handleOnConnect();
                   }, 5000);
               }
               if (typeof ALSocket.events.onConnect === "function") {
                   ALSocket.events.onConnect();
               }
           };
           ALSocket.handleOnConnect = function () {
               var topic = "/topic/" + ALSocket.MCK_TOKEN;
               var encryptedTopic = "/topic/encr-" + ALSocket.MCK_TOKEN;
               subscriber = ALSocket.stompClient.subscribe(topic, ALSocket.onStompMessage);
               ALSocket.USER_ENCRYPTION_KEY && (encryptedSubscriber = ALSocket.stompClient.subscribe(encryptedTopic, ALSocket.onStompMessage));
               ALSocket.sendStatus(1);
               ALSocket.checkConnected(true);
           };
           ALSocket.onOpenGroupMessage = function (obj) {
               if (typeof ALSocket.events.onOpenGroupMessage === "function") {
                   ALSocket.events.onOpenGroupMessage(obj);
               }
           };
           ALSocket.onStompMessage = function (obj) {
               var response;
               if (subscriber != null && subscriber.id === obj.headers.subscription) {
                   response = obj.body;
               } else if (encryptedSubscriber != null && encryptedSubscriber.id === obj.headers.subscription) {
                   var encryptionKey = mckUtils.isAES256EncryptionType() ? ALSocket.ENCRYPTION_KEY : ALSocket.USER_ENCRYPTION_KEY;
                   response = mckUtils.decrypt(obj.body, encryptionKey);
               }
               ALSocket.onMessage(response);
           };
           ALSocket.onMessage = function (obj) {
               if (mckUtils.isJsonString(obj)) {
                   var resp = JSON.parse(obj);
                   var messageType = resp.type;
                   if (typeof ALSocket.events.onMessage === "function") {
                       ALSocket.events.onMessage(resp);
                   }
                   if (messageType === "APPLOZIC_04" || messageType === "MESSAGE_DELIVERED") {
                       ALSocket.events.onMessageDelivered(resp);
                   } else if (messageType === 'APPLOZIC_08' || messageType === "MT_MESSAGE_DELIVERED_READ") {
                       ALSocket.events.onMessageRead(resp);
                   } else if (messageType === "APPLOZIC_05") {
                       ALSocket.events.onMessageDeleted(resp);
                   } else if (messageType === 'APPLOZIC_27') {
                       ALSocket.events.onConversationDeleted(resp);
                   } else if (messageType === 'APPLOZIC_11') {
                       ALSocket.events.onUserConnect(resp.message);
                   } else if (messageType === 'APPLOZIC_12') {
                       var userId = resp.message.split(",")[0];
                       var lastSeenAtTime = resp.message.split(",")[1];
                       ALSocket.events.onUserDisconnect({
                           'userId': userId,
                           'lastSeenAtTime': lastSeenAtTime
                       });
                   } else if (messageType === "APPLOZIC_29") {
                       ALSocket.events.onConversationReadFromOtherSource(resp);
                   } else if (messageType === 'APPLOZIC_28') {
                       ALSocket.events.onConversationRead(resp);
                   } else if (messageType === "APPLOZIC_16") {
                       var status = resp.message.split(":")[0];
                       var userId = resp.message.split(":")[1];
                       ALSocket.events.onUserBlocked({
                           'status': status,
                           'userId': userId
                       });
                   } else if (messageType === 'APPLOZIC_17') {
                       var status = resp.message.split(":")[0];
                       var userId = resp.message.split(":")[1];
                       ALSocket.events.onUserUnblocked({
                           'status': status,
                           'userId': userId
                       });
                   } else if (messageType === 'APPLOZIC_18') {
                       ALSocket.events.onUserActivated();
                   } else if (messageType === 'APPLOZIC_19') {
                       ALSocket.events.onUserDeactivated();
                   } else if(messageType === 'APPLOZIC_25') {
                       ALSocket.events.onUserStatusUpdate && // This is the customer requirement by VakilSearch and not available for other customer
                         ALSocket.events.onUserStatusUpdate(); 
                   } else {
                       var message = resp.message;
                       if (messageType === "APPLOZIC_03") {
                           ALSocket.events.onMessageSentUpdate({
                               'messageKey': message.key
                           });
                       } else if (messageType === "APPLOZIC_01" || messageType === "MESSAGE_RECEIVED") {
                           var messageFeed = alMessageService.getMessageFeed(message);
                           ALSocket.events.onMessageReceived({
                               'message': messageFeed
                           });
                       } else if (messageType === "APPLOZIC_02") {
                           var messageFeed = alMessageService.getMessageFeed(message);
                           ALSocket.events.onMessageSent({
                               'message': messageFeed
                           });
                       }
                   }
               }
           };
                          
           return ALSocket;
       }
   
       if(typeof(ALSocket) === 'undefined'){
           window.Applozic.ALSocket = define_ALSocket();
       } else{
           console.log("ALSocket already defined.");
       }
   })(window);
   
   var mckNotificationUtils = new MckNotificationUtils();
   var alNotificationService = new AlNotificationService();
   
   function AlNotificationService() {
     var _this = this;
   
     var IS_SW_NOTIFICATION_ENABLED;
     var MCK_GETUSERIMAGE;
     var MCK_NOTIFICATION_ICON_LINK;
     var IS_MCK_NOTIFICATION;
     var MCK_SW_SUBSCRIPTION;
     var MCK_SW_REGISTER_URL = "/rest/ws/plugin/update/sw/id";
     var IS_MCK_TAB_FOCUSED = true;
   
     _this.init = function(optns) {
       IS_SW_NOTIFICATION_ENABLED = (typeof optns.swNotification === "boolean") ? optns.swNotification : false;
       MCK_GETUSERIMAGE = optns.contactDisplayImage;
       MCK_NOTIFICATION_ICON_LINK = optns.notificationIconLink;
       IS_MCK_NOTIFICATION = (typeof optns.desktopNotification === "boolean") ? optns.desktopNotification : false;
     };
     _this.unsubscribeToServiceWorker = function() {
       if (MCK_SW_SUBSCRIPTION) {
         navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
           MCK_SW_SUBSCRIPTION.unsubscribe().then(function(successful) {
             MCK_SW_SUBSCRIPTION = null;
             console.log('Unsubscribed to notification successfully');
           })
         });
       }
     };
     _this.sendSubscriptionIdToServer = function() {
       if (MCK_SW_SUBSCRIPTION) {
         var subscriptionId = MCK_SW_SUBSCRIPTION.endpoint.split("/").slice(-1)[0];
         if (subscriptionId) {
           window.Applozic.ALApiService.sendSubscriptionIdToServer({
             data: {
               "subscriptionId": subscriptionId
             },
             success: function(result) {},
             error: function() {}
           });
         }
       }
     };
     _this.subscribeToServiceWorker = function() {
       if (IS_SW_NOTIFICATION_ENABLED) {
         if ('serviceWorker' in navigator) {
           navigator.serviceWorker.register('./service-worker.js', {
             scope: './'
           });
           navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
             serviceWorkerRegistration.pushManager.subscribe({
               userVisibleOnly: true
             }).then(function(pushSubscription) {
               console.log('The reg ID is:: ', pushSubscription.endpoint.split("/").slice(-1));
               MCK_SW_SUBSCRIPTION = pushSubscription;
               _this.sendSubscriptionIdToServer();
             })
           });
         }
       }
     };
   }
   
   function MckNotificationUtils() {
     var _this = this;
     var w = window.top; // window.top returns the topmost window in the hierarchy of window objects.
     var PERMISSION_DEFAULT = "default",
       PERMISSION_GRANTED = "granted",
       PERMISSION_DENIED = "denied",
       PERMISSION = [PERMISSION_GRANTED, PERMISSION_DEFAULT, PERMISSION_DENIED],
       isSupported = (function() {
         var isSupported = false;
         try {
           isSupported = !!( /* Safari, Chrome */ w.Notification || /* Chrome & ff-html5notifications plugin */ w.webkitNotifications || /* Firefox Mobile */ navigator.mozNotification || /* IE9+ */ (w.external && w.external.msIsSiteMode() !== undefined));
         } catch (e) {}
         return isSupported;
       }()),
       isFunction = function(value) {
         return (value && (value).constructor === Function);
       },
       isString = function(value) {
         return (value && (value).constructor === String);
       },
       isObject = function(value) {
         return (value && (value).constructor === Object);
       },
       ieVerification = Math.floor((Math.random() * 10) + 1),
       noop = function() {};
     _this.permissionLevel = function() {
       var permission;
       if (!isSupported) {
         return;
       }
       if (w.Notification && w.Notification.permissionLevel) {
         // Safari 6
         permission = w.Notification.permissionLevel();
       } else if (w.webkitNotifications && w.webkitNotifications.checkPermission) {
         // Chrome & Firefox with html5-notifications plugin installed
         permission = PERMISSION[w.webkitNotifications.checkPermission()];
       } else if (w.Notification && w.Notification.permission) {
         // Firefox 23+
         permission = w.Notification.permission;
       } else if (navigator.mozNotification) {
         // Firefox Mobile
         permission = PERMISSION_GRANTED;
       } else if (w.external && (w.external.msIsSiteMode() !== undefined)) { /* keep last */
         // IE9+
         permission = w.external.msIsSiteMode() ? PERMISSION_GRANTED : PERMISSION_DEFAULT;
       }
       return permission;
     };
     _this.requestPermission = function(callback) {
       var callbackFunction = isFunction(callback) ? callback : noop;
       if (w.webkitNotifications && w.webkitNotifications.checkPermission) {
         w.webkitNotifications.requestPermission(callbackFunction);
       } else if (w.Notification && w.Notification.requestPermission) {
         w.Notification.requestPermission(callbackFunction);
       }
     };
     _this.isChrome = function() {
       return /chrom(e|ium)/.test(w.navigator.userAgent.toLowerCase());
     };
     _this.getNotification = function(displayName, iconLink, msg, notificationsound) {
       if (notificationsound) {
         notificationsound.play();
         setTimeout(function() {
           notificationsound.stop();
         }, 1000);
       }
       var notification;
       if (w.Notification) { /* Safari 6, Chrome (23+) */
         var options = {
           icon: iconLink,
           body: msg
         };
         notification = new w.Notification(displayName, options);
         notification.onclick = function() {
           w.focus();
           this.close();
         };
       } else if (w.webkitNotifications) { /* FF with html5Notifications plugin installed */
         notification = w.webkitNotifications.createNotification(iconLink, displayName, msg);
         if (notificationsound) {
           notification.show();
         }
         if (_this.isChrome()) {
           notification.onclick = function() {
             w.focus();
             this.cancel();
           };
         }
         notification.show();
         setTimeout(function() {
           notification.cancel();
         }, 30000);
       } else if (navigator.mozNotification) { /* Firefox Mobile */
         notification = navigator.mozNotification.createNotification(displayName, msg, iconLink);
         notification.show();
       } else if (w.external && w.external.msIsSiteMode()) { /* IE9+ */
         // Clear any previous notifications
         w.external.msSiteModeClearIconOverlay();
         w.external.msSiteModeSetIconOverlay(iconLink, displayName);
         w.external.msSiteModeActivate();
         notification = {
           "ieVerification": ieVerification + 1
         };
       }
       return notification;
     };
     _this.sendDesktopNotification = function(displayName, iconLink, msg, notificationsound) {
       if (_this.permissionLevel() !== PERMISSION_GRANTED) {
         w.Notification.requestPermission();
       }
       if (_this.permissionLevel() === PERMISSION_GRANTED) {
         var notification;
         if (notificationsound) {
           notification = _this.getNotification(displayName, iconLink, msg, notificationsound);
         } else {
           notification = _this.getNotification(displayName, iconLink, msg);
         }
         var notificationWrapper = _this.getWrapper(notification);
         if (notification && !notification.ieVerification && notification.addEventListener) {
           notification.addEventListener("show", function() {
             var notification = notificationWrapper;
             w.setTimeout(function() {
               notification.close();
             }, 30000);
           });
         }
       }
     };
     _this.getWrapper = function(notification) {
       return {
         close: function() {
           if (notification) {
             if (notification.close) {
               // http://code.google.com/p/ff-html5notifications/issues/detail?id=58
               notification.close();
             } else if (notification.cancel) {
               notification.cancel();
             } else if (w.external && w.external.msIsSiteMode()) {
               if (notification.ieVerification === ieVerification) {
                 w.external.msSiteModeClearIconOverlay();
               }
             }
           }
         }
       };
     };
   }
   
   var mckGroupUtils = new MckGroupUtils();
   var mckGroupService = new MckGroupService();
   
   function MckGroupUtils() {
     var _this = this;
     _this.GROUP_ROLE_MAP = [0, 1, 2, 3];
     _this.GROUP_TYPE_MAP = [1, 2, 5, 6, 7, 9, 10];
     _this.CONVERSATION_STATUS_MAP = ["DEFAULT", "NEW", "OPEN"];
     _this.ROLE_MAP = {
       0: 'User',
       1: 'Admin',
       2: 'Moderator',
       3: 'Member'
     };
     _this.getDeletedAtTime = function (groupId) {
       if (typeof MCK_GROUP_MAP[groupId] === 'object') {
         var group = MCK_GROUP_MAP[groupId];
         return group['deletedAtTime'];
       }
     };
   
     _this.leaveGroup = function (params) {
       if (typeof params !== 'object') {
         return 'Unsupported Format. Please check format';
       }
       if (typeof params.callback === 'function') {
         if ((typeof params.groupId === 'undefined' || params.groupId === '') && (typeof params.clientGroupId === 'undefined' || params.clientGroupId === '')) {
           params.callback({
             'status': 'error',
             'errorMessage': 'GroupId or Client GroupId Required'
           });
           return;
         }
         params.apzCallback = mckGroupLayout.onGroupLeft;
         mckGroupService.leaveGroup(params);
         return "success";
       } else {
         return "Callback Function Required";
       }
     };
   
     _this.initGroupTab = function (params,callback) {
       if (typeof params === "object") {
         var users = params.users;
         if (typeof users === 'undefined' || users.length < 1) {
           return 'Users List Required';
         }
         if (users.length > MCK_GROUP_MAX_SIZE) {
           return 'Users limit exceeds ' + MCK_GROUP_MAX_SIZE + '. Max number of users allowed is ' + MCK_GROUP_MAX_SIZE + '.';
         }
         if (!params.groupName) {
           return 'Group name required';
         }
         if (typeof params.type === 'undefined') {
           return 'Group type required';
         }
         if (mckGroupUtils.GROUP_TYPE_MAP.indexOf(params.type) === -1) {
           return 'Invalid group type';
         }
         typeof callback == "function" && callback(params);
         return 'success';
       } else {
         return 'Unsupported format. Please check format';
       }
     };
   
     _this.getGroup = function (groupId) {
       if (typeof MCK_GROUP_MAP[groupId] === 'object') {
         return MCK_GROUP_MAP[groupId];
       } else {
         return;
       }
     };
     _this.getGroupByClientGroupId = function (clientGroupId) {
       if (typeof MCK_CLIENT_GROUP_MAP[clientGroupId] === 'object') {
         return MCK_CLIENT_GROUP_MAP[clientGroupId];
       } else {
         return;
       }
     };
     _this.addGroup = function (group) {
       var name = (group.name) ? group.name : group.id;
       var users = [];
       group && group.groupUsers && group.groupUsers.forEach(function(user, i){
         if (user.userId) {
           users[user.userId] = user;
         }
       });
   
       var removedMembersId = (typeof group.removedMembersId !== 'undefined') ? group.removedMembersId : [];
       var groupFeed = {
         'contactId': group.id.toString(),
         'htmlId': mckContactUtils.formatContactId('' + group.id),
         'displayName': name,
         'value': group.id.toString(),
         'adminName': group.adminId ? group.adminId : group.adminName,
         'type': group.type,
         'members': group.membersId ? group.membersId : group.membersName,
         'imageUrl': group.imageUrl,
         'users': users,
         'userCount': group.userCount,
         'removedMembersId': removedMembersId,
         'clientGroupId': group.clientGroupId,
         'isGroup': true,
         'deletedAtTime': group.deletedAtTime,
         'metadata': group.metadata,
       };
       MCK_GROUP_MAP[group.id] = groupFeed;
       if (group.clientGroupId) {
         MCK_CLIENT_GROUP_MAP[group.clientGroupId] = groupFeed;
       }
       return groupFeed;
     };
     _this.createGroup = function (groupId) {
       var group = {
         'contactId': groupId.toString(),
         'htmlId': mckContactUtils.formatContactId('' + groupId),
         'displayName': groupId.toString(),
         'value': groupId.toString(),
         'type': 2,
         'adminName': '',
         'imageUrl': '',
         'userCount': '',
         'users': [],
         'removedMembersId': [],
         'clientGroupId': '',
         'isGroup': true,
         'deletedAtTime': ''
   
       };
       MCK_GROUP_MAP[groupId] = group;
       return group;
     };
   }
   
   function MckGroupService() {
     var _this = this;
     var IS_MCK_VISITOR;
     var MCK_USER_ID;
     var MCK_OPEN_GROUP_SETTINGS;
     var MCK_GROUP_MAX_SIZE;
     var MCK_LAST_SEEN_AT_MAP = [];
     var MCK_BLOCKED_TO_MAP = [];
     var GROUP_LIST_URL = "/rest/ws/group/list";
     var GROUP_FEED_URL = "/rest/ws/group/info";
     var GROUP_LEAVE_URL = "/rest/ws/group/left";
     var GROUP_UPDATE_INFO_URL = "/rest/ws/group/update";
     var GROUP_ADD_MEMBER_URL = "/rest/ws/group/add/member";
     var GROUP_REMOVE_MEMBER_URL = "/rest/ws/group/remove/member";
     MCK_GROUP_ARRAY = new Array();
   
     _this.addGroups = function (response) {
       var groups = response.data;
       MCK_GROUP_ARRAY.length = 0;
       groups && groups.forEach(function (group, i) {
         if ((typeof group.id !== 'undefined')) {
           var group = mckGroupUtils.addGroup(group);
           MCK_GROUP_ARRAY.push(group);
         }
       });
     };
   
     _this.removeGroupMember = function (params) {
       if (typeof params !== 'object') {
         return 'Unsupported Format. Please check format';
       }
       if (typeof params.callback === 'function') {
         if ((typeof params.groupId === 'undefined' || params.groupId === '') && (typeof params.clientGroupId === 'undefined' || params.clientGroupId === '')) {
           params.callback({
             'status': 'error',
             'errorMessage': 'GroupId or clientGroupId required'
           });
           return;
         }
         if (typeof params.userId === 'undefined' || params.userId === '') {
           params.callback({
             'status': 'error',
             'errorMessage': 'UserId required'
           });
           return;
         }
         params.apzCallback = mckGroupLayout.onRemovedGroupMember;
         mckGroupService.removeGroupMemberFromChat(params);
         return 'success';
       } else {
         return 'Callback function required';
       }
     };
   
     _this.createGroup = function (params,callback) {
       if (typeof params === 'object') {
         if (typeof params.callback === 'function') {
           var users = params.users;
           if (typeof users === 'undefined' || users.length < 1) {
             params.callback({
               'status': 'error',
               'errorMessage': 'Users list required'
             });
             return;
           }
           if (users.length > MCK_GROUP_MAX_SIZE) {
             params.callback({
               'status': 'error',
               'errorMessage': "Users limit exceeds " + MCK_GROUP_MAX_SIZE + ". Max number of users allowed is " + MCK_GROUP_MAX_SIZE + "."
             });
             return;
           }
           if (!params.groupName) {
             params.callback({
               'status': 'error',
               'errorMessage': 'Group name required'
             });
             return;
           }
           if (typeof params.type === 'undefined' || params.type === '') {
             params.callback({
               'status': 'error',
               'errorMessage': 'Group type required'
             });
             return;
           }
           if (mckGroupUtils.GROUP_TYPE_MAP.indexOf(params.type) === -1) {
             params.callback({
               'status': 'error',
               'errorMessage': 'Invalid group type'
             });
             return;
           }
           typeof callback == "function" && callback(params);
           return 'success';
         } else {
           return 'Callback function required';
         }
       } else {
         return 'Unsupported Format. Please check format';
       }
     };
   
     _this.init = function (options) {
       IS_MCK_VISITOR = options.visitor;
       MCK_USER_ID = (IS_MCK_VISITOR) ? 'guest' : (options.userId && options.userId.toString().trim());
       MCK_OPEN_GROUP_SETTINGS = options.openGroupSettings;
       MCK_GROUP_MAX_SIZE = options.maxGroupSize;
     };
   
     _this.getGroupList = function (params) {
       if (typeof params.callback === 'function') {
         params.apzCallback = _this.addGroups;
         _this.loadGroups(params);
         return 'success';
       } else {
         return 'Callback Function Required';
       }
     };
   
     _this.loadGroups = function (params) {
       var response = new Object();
       window.Applozic.ALApiService.loadGroups({
         baseUrl: MCK_BASE_URL,
         success: function (data) {
           if (data.status === 'success') {
             response.status = 'success';
             response.data = data.response;
             if (params.apzCallback) {
               params.apzCallback(response);
             }
           } else {
             response.status = 'error';
           }
           if (params.callback) {
             params.callback(response);
           }
         },
         error: function () {
           console.log('Unable to load groups. Please reload page.');
           response.status = 'error';
           if (params.callback) {
             params.callback(response);
           }
           if (params.apzCallback) {
             params.apzCallback(response);
           }
         }
       });
     };
     _this.getGroupFeed = function (params) {
       var group = {};
       if (typeof params.callback === 'function' || typeof params.apzCallback === 'function') {
         var response = new Object();
       } else {
         return;
       }
       if (params.groupId) {
         group.groupId = params.groupId;
       } else if (params.clientGroupId) {
         group.clientGroupId = params.clientGroupId;
       } else {
         if (typeof params.callback === 'function') {
           response.status = "error";
           response.errorMessage = "GroupId or Client GroupId Required";
           params.callback(response);
         }
         return;
       }
       if (params.conversationId) {
         group.conversationId = params.conversationId;
       }
   
       Applozic.ALApiService.getGroupInfo({
         data: group,
         success: function (response) {
           if (response.status === "success") {
             var groupFeed = response.response;
             if (groupFeed + '' === "null" || typeof groupFeed !== "object") {
               response.status = "error";
               response.errorMessage = "GroupId not found";
             } else {
               var group = mckGroupUtils.addGroup(groupFeed);
               response.status = "success";
               response.data = group;
             }
           } else if (response.status === "error") {
             response.status = "error";
             response.errorMessage = response.errorResponse[0].description;
           }
           if (params.callback) {
             params.callback(response);
           }
           if (params.apzCallback) {
             if (response.status === "success") {
               response.data = groupFeed;
             }
             params.apzCallback(response, params);
           }
         },
         error: function () {
           console.log('Unable to load group. Please reload page.');
           response.status = "error";
           response.errorMessage = 'Please reload page.';
           if (params.callback) {
             params.callback(response);
           }
           if (params.apzCallback) {
             params.apzCallback(response, params);
           }
         }
       });
     };
     _this.leaveGroup = function (params) {
       var group = {};
       var response = new Object();
       if (params.groupId) {
         group.groupId = params.groupId;
       } else if (params.clientGroupId) {
         group.clientGroupId = params.clientGroupId;
       } else {
         response.status = "error";
         response.errorMessage = "GroupId or Client GroupId Required";
         if (params.callback) {
           params.callback(response);
         }
         return;
       }
       Applozic.ALApiService.groupLeave({
         data: group,
         success: function (data) {
           if (data.status === "success") {
             if (params.clientGroupId) {
               var groupInfo = mckGroupUtils.getGroupByClientGroupId(params.clientGroupId);
               if (typeof groupInfo === 'object') {
                 params.groupInfo = groupInfo.contactId;
               }
             }
             response.status = "success";
             response.data = {
               groupId: params.groupId
             };
           } else {
             response.status = "error";
             response.errorMessage = data.errorResponse[0].description;
           }
           if (params.callback) {
             params.callback(response);
           }
           if (params.apzCallback) {
             params.apzCallback(response, {
               groupId: params.groupId
             });
           }
         },
         error: function () {
           console.log('Unable to process your request. Please reload page.');
           response.status = "error";
           response.errorMessage = "";
           if (params.callback) {
             params.callback(response);
           }
           if (params.apzCallback) {
             params.apzCallback(response);
           }
         }
       });
     };
     _this.removeGroupMemberFromChat = function (params) {
       var group = {};
       var response = new Object();
       if (params.groupId) {
         group.groupId = params.groupId;
       } else if (params.clientGroupId) {
         group.clientGroupId = params.clientGroupId;
       } else {
         response.status = 'error';
         response.errorMessage = "GroupId or Client GroupId Required";
         if (typeof params.callback === 'function') {
           params.callback(response);
         }
         return;
       }
       group.userId = params.userId;
       Applozic.ALApiService.removeGroupMember({
         data: group,
         success: function (response) {
           if (response.status === 'success') {
             if (params.clientGroupId) {
               var group = mckGroupUtils.getGroupByClientGroupId(params.clientGroupId);
               if (typeof group === 'object') {
                 params.groupId = group.contactId;
               }
             }
             response.status = "success";
             // response.data = data.response;
           } else {
             response.status = "error";
             response.errorMessage = data.errorResponse[0].description;
           }
           if (params.callback) {
             params.callback(response);
           }
           if (params.apzCallback) {
             params.apzCallback(response, params);
           }
         },
         error: function () {
           console.log('Unable to process your request. Please reload page.');
           response.status = 'error';
           response.errorMessage = '';
           if (params.callback) {
             params.callback(response);
           }
           if (params.apzCallback) {
             params.apzCallback(response);
           }
           params.apzCallback(response);
         }
       });
     };
   
     _this.addGroupMember = function (params) {
       var group = {};
       var response = new Object();
       if (params.groupId) {
         group.groupId = params.groupId;
       } else if (params.clientGroupId) {
         group.clientGroupId = params.clientGroupId;
       } else {
         if (typeof params.callback === 'function') {
           params.callback(response);
         }
         return;
       }
       group.userId = params.userId;
       if (typeof params.role !== 'undefined') {
         group.role = params.role;
       }
       Applozic.ALApiService.addGroupMember({
         data: {
           group: group
         },
         success: function (data) {
           if (data.status === "success") {
             if (params.clientGroupId) {
               var group = mckGroupUtils.getGroupByClientGroupId(params.clientGroupId);
               if (typeof group === 'object') {
                 params.groupId = group.contactId;
               }
             }
             response.status = 'success';
             response.data = data.response;
           } else {
             response.status = 'error';
             response.errorMessage = data.errorResponse[0].description;
           }
           if (params.callback) {
             params.callback(response);
           }
           if (params.apzCallback) {
             params.apzCallback(response, params)
           }
         },
         error: function () {
           console.log('Unable to process your request. Please reload page.');
           response.status = "error";
           response.errorMessage = '';
           if (params.callback) {
             params.callback(response);
           }
           if (params.apzCallback) {
             params.apzCallback(response);
           }
         }
       });
     };
     _this.updateGroupInfo = function (params) {
       var group = {};
       var response = new Object();
       if (params.groupId) {
         group.groupId = params.groupId;
       } else if (params.clientGroupId) {
         group.clientGroupId = params.clientGroupId;
       } else {
         if (typeof params.callback === 'function') {
           response.status = 'error';
           response.errorMessage = 'GroupId or Client GroupId Required';
           params.callback(response);
         }
         return;
       }
       if (params.name) {
         group.newName = params.name;
       }
       if (params.imageUrl) {
         group.imageUrl = params.imageUrl;
       }
       if (params.users && params.users.length > 0) {
         group.users = params.users;
       }
       Applozic.ALApiService.groupUpdate({
         data: group,
         success: function (data, group) {
           if (data.status === "success") {
             if (params.clientGroupId) {
               var group = mckGroupLayout.getGroupByClientGroupId(params.clientGroupId);
               if (typeof group === 'object') {
                 params.groupId = group.contactId;
               }
             }
             response.status = "success";
             response.data = data.response;
           } else {
             response.status = "error";
             response.errorMessage = data.errorResponse[0].description;
           }
           if (params.callback) {
             params.callback(response);
           }
           if (params.apzCallback) {
             params.apzCallback(response, {
               groupId: params.groupId,
               groupInfo: group,
               users: params.users
             })
           }
         },
         error: function () {
           console.log('Unable to process your request. Please reload page.');
           response.status = "error";
           response.errorMessage = "Unable to process your request. Please reload page.";
           if (params.callback) {
             params.callback(response);
           }
           if (params.apzCallback) {
             params.apzCallback(response);
           }
         }
       });
     };
     _this.sendGroupMessage = function (params) {
       if (typeof params === 'object') {
         params = mckUtils.extendObject(true, {}, message_default_options, params);
         var message = params.message;
         if (!params.groupId && !params.clientGroupId) {
           return 'groupId or clientGroupId required';
         }
         if (typeof message === 'undefined' || message === '') {
           return 'message field required';
         }
         if (params.type > 12) {
           return 'invalid message type';
         }
         message = message && message.trim();
         var messagePxy = {
           'type': params.messageType,
           'contentType': params.type,
           'message': message
         };
         if (params.groupId) {
           messagePxy.groupId = params.groupId.toString().trim();
         } else if (params.clientGroupId) {
           var group = mckGroupUtils.getGroupByClientGroupId(params.clientGroupId);
           if (typeof group === 'undefined') {
             return 'group not found';
           }
           messagePxy.clientGroupId = params.clientGroupId.toString().trim();
         }
         mckMessageService.sendMessage(messagePxy);
         return 'success';
       } else {
         return 'Unsupported format. Please check format';
       }
     };
   
     //function MckMessageLayout
     _this.getContactFromGroupOfTwo = function (group, callback) {
       var user;
       for (var i = 0; i < group.members.length; i++) {
         user = '' + group.members[i];
         if (MCK_USER_ID === user) {
           continue;
         }
   
         if (typeof callback === "function") {
           callback(user);
         }
         return user;
         //return _this.fetchContact('' + group.members[i]);
       }
     };
     _this.addGroupFromMessage = function (message, update, callback) {
       var groupId = message.groupId;
       var group = mckGroupUtils.getGroup('' + groupId);
       if (typeof group === 'undefined') {
         group = mckGroupUtils.createGroup(groupId);
         _this.loadGroups({
           apzCallback: _this.addGroups
         });
       }
       if (typeof callback === "function") {
         callback(group, message, update);
       }
     };
     _this.isGroupDeleted = function (tabId, isGroup) {
       if (isGroup) {
         var deletedAtTime = mckGroupUtils.getDeletedAtTime(tabId);
         return (typeof deletedAtTime !== 'undefined' && deletedAtTime > 0);
       }
       return false;
     };
   
     _this.loadGroupsCallback = function (response) {
       var groups = response.data;
       MCK_GROUP_ARRAY.length = 0;
       groups && groups.groupUsers && groups.groupUsers.forEach(function (group, i) {
         if ((typeof group.id !== 'undefined')) {
           var group = mckGroupUtils.addGroup(group);
           MCK_GROUP_ARRAY.push(group);
         }
       });
     };
   
     _this.getGroupDisplayName = function (groupId) {
       if (typeof MCK_GROUP_MAP[groupId] === 'object') {
         var group = MCK_GROUP_MAP[groupId];
         var displayName = group['displayName'];
         /* if (typeof group !== 'undefined' && group.type === 10) {
              var userIdArray = [];
   
              if (group.members.length > 0) {
                  for (var i = 0; i < group.members.length; i++) {
                      userIdArray.push(group.members[i]);
                  }
              }
              if (group.users[MCK_USER_ID].role === 0 || group.users[MCK_USER_ID].role === 3) {
                  displayName = "Kommunicate";
              } else {
                  var contact;
                  for (var i = 0; i < userIdArray.length; i++) {
                      var userId = userIdArray[i];
                      if (group.users[userId].role === 3) {
                          contact = userId;
                      }
                  }
                  displayName = mckMessageLayout.getTabDisplayName(contact, false);
              }
          }*/
         var userIdList = [];
         if (group.type === 7) {
           var contact = _this.getContactFromGroupOfTwo(group);
           if (typeof contact !== 'undefined') {
             if (!alUserService.MCK_USER_DETAIL_MAP[contact]) {
               userIdList.push(contact);
               window.Applozic.ALApiService.getUserDetail({
                 data: userIdList,
                 success: function (data) {
                   if (data && data.response && data.response.length > 0) {
                     data.response.forEach(function (userDetail, i) {
                       alUserService.MCK_USER_DETAIL_MAP[userDetail.userId] = userDetail;
                       if (alUserService.MCK_USER_DETAIL_MAP[contact] && alUserService.MCK_USER_DETAIL_MAP[contact].displayName) {
                         displayName = alUserService.MCK_USER_DETAIL_MAP[contact].displayName;
                       }
                     });
                   }
                 }
               })
             } else {
               if (alUserService.MCK_USER_DETAIL_MAP[contact] && alUserService.MCK_USER_DETAIL_MAP[contact].displayName) {
                 displayName = alUserService.MCK_USER_DETAIL_MAP[contact].displayName;
               }
             }
           }
         }
         if (group.type === 3) {
           if (displayName.indexOf(MCK_USER_ID) !== -1) {
             displayName = displayName.replace(MCK_USER_ID, '').replace(":", '');
             if (typeof (MCK_GETUSERNAME) === "function") {
               var name = (MCK_GETUSERNAME(displayName));
               displayName = (name) ? name : displayName;
             }
           }
         }
         if (!displayName && group.type === 5) {
           displayName = 'Broadcast';
         }
         if (!displayName) {
           displayName = group.contactId;
         }
         return displayName;
       } else {
         return groupId;
       }
     };
     _this.getGroupImage = function (imageSrc) {
       return (imageSrc) ? '<img src="' + imageSrc + '"/>' : '<img src="' + MCK_BASE_URL + '/resources/sidebox/css/app/images/mck-icon-group.png"/>';
     };
     _this.getGroupDefaultIcon = function () {
       return '<div class="mck-group-icon-default"></div>';
     };
     _this.addMemberToGroup = function (group, userId) {
       if (typeof group.members === 'object') {
         if (group.members.indexOf(userId) === -1) {
           group.members.push(userId);
         }
         if (typeof group.removedMembersId === 'object' && (group.removedMembersId.indexOf(userId) !== -1)) {
           group.removedMembersId.splice(group.removedMembersId.indexOf(userId), 1);
         }
         MCK_GROUP_MAP[group.contactId] = group;
       }
       return group;
     };
     _this.removeMemberFromGroup = function (group, userId) {
       if (typeof group.removedMembersId !== 'object' || group.removedMembersId.length < 1) {
         group.removedMembersId = [];
         group.removedMembersId.push(userId);
       } else if (group.removedMembersId.indexOf(userId) === -1) {
         group.removedMembersId.push(userId);
       }
       MCK_GROUP_MAP[group.contactId] = group;
       return group;
     };
     _this.authenticateGroupUser = function (group) {
       var isGroupLeft = _this.isGroupLeft(group);
       var isGroupMemeber = false;
       if (!isGroupLeft && group.members.length > 0) {
         for (var i = 0; i < group.members.length; i++) {
           if (MCK_USER_ID === '' + group.members[i]) {
             isGroupMemeber = true;
             return true;
           }
         }
       }
       return isGroupMemeber;
     };
     _this.isAppendOpenGroupContextMenu = function (group) {
       if (MCK_OPEN_GROUP_SETTINGS.deleteChatAccess === 0) {
         return false;
       }
       var isGroupMember = mckGroupService.authenticateGroupUser(group);
       if (!isGroupMember) {
         return false;
       }
       if (group.adminName === MCK_USER_ID) {
         return true;
       }
   
       if (MCK_OPEN_GROUP_SETTINGS.deleteChatAccess === 2) {
         return true;
       }
       return false;
     }
     _this.isGroupLeft = function (group) {
       var isGroupLeft = false;
       if (group.removedMembersId && group.removedMembersId.length > 0) {
         group.removedMembersId.forEach(function (removedMemberId, i) {
           if (removedMemberId === MCK_USER_ID) {
             isGroupLeft = true;
           }
         });
       }
       return isGroupLeft;
     };
   
   
   }
   
   var alUserService = new AlUserService();
   
   function AlUserService() {
     var _this = this;
      _this.MCK_USER_DETAIL_MAP = [];
      _this.MCK_BLOCKED_TO_MAP = [];
     var MCK_GROUP_MEMBER_SEARCH_ARRAY = new Array();
     var USER_BLOCK_URL = "/rest/ws/user/block";
     var USER_DETAIL_URL = "/rest/ws/user/v2/detail";
     var USER_STATUS_URL = "/rest/ws/user/chat/status";
   
     _this.updateUserStatus = function(params, callback) {
       if (typeof alUserService.MCK_USER_DETAIL_MAP[params.userId] === 'object') {
         var userDetail = alUserService.MCK_USER_DETAIL_MAP[params.userId];
         if (params.status === 0) {
           userDetail.connected = false;
           userDetail.lastSeenAtTime = params.lastSeenAtTime;
         } else if (params.status === 1) {
           userDetail.connected = true;
         }
       } else {
         var userIdArray = new Array();
         userIdArray.push(params.userId);
         if (typeof callback === "function") {
           callback(userIdArray);
         }
       }
     };
     _this.getUserDetail = function(userId) {
       if (typeof alUserService.MCK_USER_DETAIL_MAP[userId] === 'object') {
         return alUserService.MCK_USER_DETAIL_MAP[userId];
       } else {
         return;
       }
     };
     _this.loadUserProfile = function(userId) {
       if (typeof userId !== "undefined") {
         typeof userId !== "string" && (userId = String(userId));
         var userIdArray = [];
         var memberId = '' + userId.split(",")[0];
         userIdArray.push(memberId);
         _this.loadUserProfiles(userIdArray);
       }
     };
     _this.loadUserProfiles = function(userIds, callback) {
       var userIdArray = [];
       if (typeof callback === "function") {
         callback(userIds, userIdArray);
       }
     };
     _this.getUserStatus = function(params, callback) {
       var response = new Object();
       window.Applozic.ALApiService.getUserStatus({
         success: function(data) {
           if (data.users.length > 0) {
             MCK_GROUP_MEMBER_SEARCH_ARRAY = [];
             if (typeof callback === "function") {
               callback(data);
             }
           }
           response.status = "success";
           response.data = data;
           if (params.callback) {
             params.callback(response);
           }
           return;
         },
         error: function() {
           response.status = "error";
           if (params.callback) {
             params.callback(response);
           }
         }
       });
     };
     _this.blockUser = function(userId, isBlock, callback) {
       if (!userId || typeof isBlock === 'undefined') {
         return;
       }
       var data = "userId=" + userId + "&block=" + isBlock;
       mckUtils.ajax({
         url: MCK_BASE_URL + USER_BLOCK_URL,
         type: 'get',
         data: data,
         encryptionKey: window.Applozic.ALApiService.getEncryptionKey(),
         success: function(data) {
           if (typeof data === 'object') {
             if (data.status === 'success') {
               alUserService.MCK_BLOCKED_TO_MAP[userId] = isBlock;
               if (typeof callback === "function") {
                 callback(userId);
               }
             }
           }
         },
         error: function() {}
       });
     };
   }
   
   // File related functions
   var alFileService = new AlFileService();
   
   function AlFileService() {
     var _this = this;
   
     var ONE_KB = 1024;
     var ONE_MB = 1048576;
     var UPLOAD_VIA = ['CREATE', 'UPDATE'];
     var FILE_PREVIEW_URL = "/rest/ws/aws/file/";
     var FILE_UPLOAD_URL = "/rest/ws/aws/file/url";
     var FILE_AWS_UPLOAD_URL = "/rest/ws/upload/file";
     var FILE_DELETE_URL = "/rest/ws/aws/file/delete";
     var CLOUD_HOST_URL = "www.googleapis.com";
     var MCK_STORAGE_URL ;
     var MCK_FILE_URL ;
     var MCK_MAP_STATIC_API_KEY ;
     var MCK_CUSTOM_UPLOAD_SETTINGS ;
     var MCK_APP_ID;
     var AUTH_CODE;
     var USER_DEVICE_KEY;
     var MCK_ACCESS_TOKEN;
     var MCK_APP_MODULE_NAME;
     var MCK_GENERATE_CLOUD_FILE_URL;
   
     _this.init = function(optns) {
       MCK_FILE_URL = optns.fileBaseUrl;
       AUTH_CODE = btoa(optns.userId + ':' + optns.deviceKey);
       USER_DEVICE_KEY = optns.deviceKey;
     };
   
     _this.get = function(optns) {
       MCK_APP_ID = optns.appId;
       MCK_STORAGE_URL = optns.customUploadUrl;
       MCK_CUSTOM_UPLOAD_SETTINGS = optns.fileupload;
       MCK_MAP_STATIC_API_KEY = optns.mapStaticAPIkey;
       MCK_ACCESS_TOKEN = optns.accessToken;
       MCK_APP_MODULE_NAME = optns.appModuleName;
       MCK_GENERATE_CLOUD_FILE_URL = optns.genereateCloudFileUrl;
     }
   
     _this.deleteFileMeta = function(blobKey) {
       window.Applozic.ALApiService.deleteFileMeta({
         data: {
           blobKey: blobKey,
           url: MCK_FILE_URL + FILE_DELETE_URL + '?key=' + blobKey,
         },
         success: function(response) {
           console.log(response);
         },
         error: function() {}
       });
     };
   
     _this.getFilePreviewPath = function(fileMeta) {
       return (typeof fileMeta === "object") ? '<a href="' + MCK_FILE_URL + FILE_PREVIEW_URL + fileMeta.blobKey + '" target="_blank">' + fileMeta.name + '</a>' : '';
     };
   
     _this.getFilePreviewSize = function(fileSize) {
       if (fileSize) {
         if (fileSize > ONE_MB) {
           return parseInt(fileSize / ONE_MB) + " MB";
         } else if (fileSize > ONE_KB) {
           return parseInt(fileSize / ONE_KB) + " KB";
         } else {
           return parseInt(fileSize) + " B";
         }
       }
       return '';
     };
   
     _this.getFileurl = function(msg) {
     if (typeof msg.fileMeta === "object") {
       if ((msg.fileMeta).hasOwnProperty("url")) {
         if (((msg.fileMeta.url).indexOf(CLOUD_HOST_URL) !== -1)) {
           var fileUrl;
           _this.generateCloudUrl(msg.fileMeta.blobKey,function(result){
             fileUrl= result;
           });
           return fileUrl;
         } else {
           return '' + msg.fileMeta.url;
         }
       } else if ((msg.fileMeta.thumbnailUrl === "thumbnail_" + msg.fileMeta.name)) {
         return MCK_STORAGE_URL + "/files/" + msg.fileMeta.name;
       } else {
         return MCK_FILE_URL + FILE_PREVIEW_URL + msg.fileMeta.blobKey;
       }
     }
       return '';
     };
   
   _this.generateCloudUrl = function(key, callback) {
     // Custom function for generating image url for google cloud server
     var url = MCK_GENERATE_CLOUD_FILE_URL.replace("{key}",key);
     var headers = window.Applozic.ALApiService.getAttachmentHeaders();
     mckUtils.ajax({
         type: 'get',
         async: false,
         skipEncryption: true,
         headers: headers,
         url: url,
         success: function(result) {
           if (typeof callback === "function") {
             callback(result);
           }
         },
         error: function(result) {
             console.log("error while getting token" + result);
         }
     });
   };
   
     _this.getFilePath = function(msg) {
       if (msg.contentType === 2) {
         try {
           var geoLoc = JSON.parse(msg.message);
           if (geoLoc.lat && geoLoc.lon) {
             return '<a href="http://maps.google.com/maps?z=17&t=m&q=loc:' + geoLoc.lat + "," + geoLoc.lon + '" target="_blank"><img src="https://maps.googleapis.com/maps/api/staticmap?zoom=17&size=200x150&center=' + geoLoc.lat + "," + geoLoc.lon + '&maptype=roadmap&markers=color:red|' + geoLoc.lat + "," + geoLoc.lon + '&key=' + MCK_MAP_STATIC_API_KEY + '"/></a>';
           }
         } catch (ex) {
           if (msg.message.indexOf(',') !== -1) {
             return '<a href="http://maps.google.com/maps?z=17&t=m&q=loc:' + msg.message + '" target="_blank"><img src="https://maps.googleapis.com/maps/api/staticmap?zoom=17&size=200x150&center=' + msg.message + '&maptype=roadmap&markers=color:red|' + msg.message + '&key=' + MCK_MAP_STATIC_API_KEY + '" /></a>';
           }
         }
       }
       if (typeof msg.fileMeta === "object") {
         if (msg.fileMeta.contentType.indexOf("image") !== -1) {
           if (msg.fileMeta.contentType.indexOf("svg") !== -1) {
             return '<a href="#" role="link" target="_self" class="file-preview-link fancybox-media imageview" data-type="' + msg.fileMeta.contentType + '" data-url="' + _this.getFileurl(msg) + '" data-name="' + msg.fileMeta.name + '"><img src="' + _this.getFileurl(msg) + '" area-hidden="true"></img></a>';
           } else if (msg.contentType === 5) {
             return '<a href="#" role="link" target="_self" class="file-preview-link fancybox-media imageview" data-type="' + msg.fileMeta.contentType + '" data-url="' + msg.fileMeta.blobKey + '" data-name="' + msg.fileMeta.name + '"><img src="' + msg.fileMeta.blobKey + '" area-hidden="true"></img></a>';
           } else {
               if((msg.fileMeta).hasOwnProperty("url")){
                 if((msg.fileMeta.url).indexOf(CLOUD_HOST_URL) !== -1){
                   // Google Cloud Server
                   var thumbnailUrl ;
                   _this.generateCloudUrl(msg.fileMeta.thumbnailBlobKey, function(result) {
                     thumbnailUrl= result;
                   });
                   return '<a href="#" role="link" target="_self" class="file-preview-link fancybox-media imageview" data-type="' + msg.fileMeta.contentType + '" data-url="" data-blobKey="' + msg.fileMeta.blobKey + '" data-name="' + msg.fileMeta.name + '"><img src="' + thumbnailUrl + '" area-hidden="true"></img></a>';
                 }
                 else {
                   return '<a href="#" role="link" target="_self" class="file-preview-link fancybox-media imageview" data-type="' + msg.fileMeta.contentType + '" data-url="' + _this.getFileurl(msg) + '" data-name="' + msg.fileMeta.name + '"><img src="' + msg.fileMeta.thumbnailUrl + '" area-hidden="true"></img></a>';
                 }
               }
               else if((msg.fileMeta.thumbnailUrl === "thumbnail_"+msg.fileMeta.name )){
               return '<a href="#" role="link" target="_self" class="file-preview-link fancybox-media imageview" data-type="' + msg.fileMeta.contentType + '" data-url="' + _this.getFileurl(msg) + '" data-name="' + msg.fileMeta.name + '"><img src="' + MCK_STORAGE_URL + "/files/thumbnail_" + msg.fileMeta.name + '" area-hidden="true"></img></a>';
               }
               else {
               return '<a href="#" role="link" target="_self" class="file-preview-link fancybox-media imageview" data-type="' + msg.fileMeta.contentType + '" data-url="' + _this.getFileurl(msg) + '" data-name="' + msg.fileMeta.name + '"><img src="' + msg.fileMeta.thumbnailUrl + '" area-hidden="true"></img></a>';
             }
           }
         } else if (msg.fileMeta.contentType.indexOf("video") !== -1) {
           if(((msg.fileMeta).hasOwnProperty("url")) && ((msg.fileMeta.url).indexOf(CLOUD_HOST_URL) !== -1)){
             // Google Cloud Server
             var getUrl ;
             _this.generateCloudUrl(msg.fileMeta.blobKey, function(result) {
               getUrl= result;
             });
             return '<a href="#" target="_self"><video controls class="mck-video-player" onplay="alFileService.updateAudVidUrl(this);" data-cloud-service="google_cloud" data-blobKey="' + msg.fileMeta.blobKey + '">' + '<source src="' + getUrl + '" type="video/mp4">' + '<source src="' + getUrl + '" type="video/ogg"></video>';
           }
           else{
             return '<a href= "#" target="_self"><video controls class="mck-video-player">' + '<source src="' + _this.getFileurl(msg) + '" type="video/mp4">' + '<source src="' + _this.getFileurl(msg) + '" type="video/ogg"></video></a>';
           }        //    return '<a href="#" role="link" class="file-preview-link fancybox-media fancybox" data-type="' + msg.fileMeta.contentType + '" data-url="' + MCK_FILE_URL + FILE_PREVIEW_URL + msg.fileMeta.blobKey + '" data-name="' + msg.fileMeta.name + '"><div class="mck-video-box n-vis"><video controls preload><source src="' + MCK_FILE_URL + FILE_PREVIEW_URL + msg.fileMeta.blobKey + '" type="' + msg.fileMeta.contentType + '"></video></div><span class="file-detail"><span class="mck-file-name"><span class="mck-icon-attachment"></span>&nbsp;' + msg.fileMeta.name + '</span>&nbsp;<span class="file-size">' + mckFileService.getFilePreviewSize(msg.fileMeta.size) + '</span></span></a>';
         } else if (msg.fileMeta.contentType.indexOf("audio") !== -1) {
           if(((msg.fileMeta).hasOwnProperty("url")) && ((msg.fileMeta.url).indexOf(CLOUD_HOST_URL) !== -1)){
             var getUrl ;
             _this.generateCloudUrl(msg.fileMeta.blobKey, function(result) {
               getUrl= result;
             });
             return '<a href="#" target="_self"><audio controls class="mck-audio-player" onplay="alFileService.updateAudVidUrl(this);" data-cloud-service="google_cloud" data-blobKey="' + msg.fileMeta.blobKey + '">' + '<source src="' + getUrl + '" type="audio/ogg">' + '<source src="' + getUrl + '" type="audio/mpeg"></audio>' + '<p class="mck-file-tag"></p></a>';
           }
           else {
           return '<a href="#" target="_self"><audio controls class="mck-audio-player">' + '<source src="' + _this.getFileurl(msg) + '" type="audio/ogg">' + '<source src="' + _this.getFileurl(msg) + '" type="audio/mpeg"></audio>' + '<p class="mck-file-tag"></p></a>';
         }
         } else {
           return '<a href="#" role="link" class="file-preview-link" target="_self"></a>';
         }
       }
       return '';
     };
   
     _this.updateAudVidUrl = function (element){
         var keygen = element.dataset.blobkey;
         var time = new Date().getTime();
         var currentSrc= element.currentSrc;
         var expiry= _this.fetchQueryString("Expires", currentSrc);
         if(time >= (expiry*1000)){
           _this.generateCloudUrl(keygen, function(result) {
               getUrl= result;
           });
         element.src=getUrl;
       }
     };
   
     this.fetchQueryString = function(regKey, href) {
       regKey = regKey.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
       var regexValue = new RegExp("[\\?&]" + regKey + "=([^&#]*)");
       var result = regexValue.exec(href);
       if (result == null) {
         console.log("The parameter is null for the searchedquery");
       }
       return (result[1]);
     };
   
     _this.getFileAttachment = function (msg) {
         if (typeof msg.fileMeta === 'object') {
             //var srcUrl=msg.fileMeta.hasOwnProperty("url")? msg.fileMeta:MCK_FILE_URL + FILE_PREVIEW_URL + msg.fileMeta.blobKey;
             if (msg.fileMeta.contentType.indexOf("image") !== -1 || (msg.fileMeta.contentType.indexOf("audio") !== -1) || (msg.fileMeta.contentType.indexOf("video") !== -1)) {
                 if((msg.fileMeta).hasOwnProperty("url") && ((msg.fileMeta.url).indexOf(CLOUD_HOST_URL) !== -1)){
                   return '<a href="javascript:void(0);" role="link" target="_self"  class="file-preview-link" data-blobKey="' + msg.fileMeta.blobKey + '" data-cloud-service="google_cloud"><span class="file-detail mck-image-download"><span class="mck-file-name"><span class="mck-attachement-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><g data-name="Group 122"><path fill="none" d="M0 0h24v24H0z" data-name="Rectangle 1"/><path d="M19.00483767 16.29529691l-11.90272845-.0417193a4.358 4.358 0 0 1-4.32607928-4.32607929A4.259 4.259 0 0 1 7.0483691 7.65515915l10.48639356.03394113v.70710678L7.07241074 8.3382243a3.61826547 3.61826547 0 1 0 .00141421 7.2365308l11.89990002.03889087a2.647 2.647 0 0 0 2.68700577-2.68700576 2.688 2.688 0 0 0-2.70680476-2.70680476l-10.15476048-.0615183a1.774 1.774 0 0 0-1.75998878 1.75998879 1.8 1.8 0 0 0 1.76776695 1.76776695l8.82681395.02899138v.70710678l-8.81832866-.02333453a2.491 2.491 0 0 1-2.47840927-2.47840926 2.46 2.46 0 0 1 2.46426713-2.46426714l10.18375186.0311127a3.462 3.462 0 0 1 3.4400745 3.4400745 3.424 3.424 0 0 1-3.4202755 3.3679496z" data-name="Path 1"/></g></svg></span>&nbsp;' + msg.fileMeta.name + '</span>&nbsp;<span class="file-size">' + alFileService.getFilePreviewSize(msg.fileMeta.size) + '</span></span></a>';
                 }
               else {
                 return '<a href="' + _this.getFileurl(msg) + '" role="link" target="_self"  class="file-preview-link"><span class="file-detail mck-image-download"><span class="mck-file-name"><span class="mck-attachement-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><g data-name="Group 122"><path fill="none" d="M0 0h24v24H0z" data-name="Rectangle 1"/><path d="M19.00483767 16.29529691l-11.90272845-.0417193a4.358 4.358 0 0 1-4.32607928-4.32607929A4.259 4.259 0 0 1 7.0483691 7.65515915l10.48639356.03394113v.70710678L7.07241074 8.3382243a3.61826547 3.61826547 0 1 0 .00141421 7.2365308l11.89990002.03889087a2.647 2.647 0 0 0 2.68700577-2.68700576 2.688 2.688 0 0 0-2.70680476-2.70680476l-10.15476048-.0615183a1.774 1.774 0 0 0-1.75998878 1.75998879 1.8 1.8 0 0 0 1.76776695 1.76776695l8.82681395.02899138v.70710678l-8.81832866-.02333453a2.491 2.491 0 0 1-2.47840927-2.47840926 2.46 2.46 0 0 1 2.46426713-2.46426714l10.18375186.0311127a3.462 3.462 0 0 1 3.4400745 3.4400745 3.424 3.424 0 0 1-3.4202755 3.3679496z" data-name="Path 1"/></g></svg></span>&nbsp;' + msg.fileMeta.name + '</span>&nbsp;<span class="file-size">' + alFileService.getFilePreviewSize(msg.fileMeta.size) + '</span></span></a>';
               }
             } else {
                 return '<a href="' + _this.getFileurl(msg) + '" role="link" target="_self"  class="file-preview-link"><span class="file-detail mck-image-download"><span class="mck-file-name"><span class="mck-attachement-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><g data-name="Group 122"><path fill="none" d="M0 0h24v24H0z" data-name="Rectangle 1"/><path d="M19.00483767 16.29529691l-11.90272845-.0417193a4.358 4.358 0 0 1-4.32607928-4.32607929A4.259 4.259 0 0 1 7.0483691 7.65515915l10.48639356.03394113v.70710678L7.07241074 8.3382243a3.61826547 3.61826547 0 1 0 .00141421 7.2365308l11.89990002.03889087a2.647 2.647 0 0 0 2.68700577-2.68700576 2.688 2.688 0 0 0-2.70680476-2.70680476l-10.15476048-.0615183a1.774 1.774 0 0 0-1.75998878 1.75998879 1.8 1.8 0 0 0 1.76776695 1.76776695l8.82681395.02899138v.70710678l-8.81832866-.02333453a2.491 2.491 0 0 1-2.47840927-2.47840926 2.46 2.46 0 0 1 2.46426713-2.46426714l10.18375186.0311127a3.462 3.462 0 0 1 3.4400745 3.4400745 3.424 3.424 0 0 1-3.4202755 3.3679496z" data-name="Path 1"/></g></svg></span>&nbsp;' + msg.fileMeta.name + '</span>&nbsp;<span class="file-size">' + alFileService.getFilePreviewSize(msg.fileMeta.size) + '</span></span></a>';
             }
             return '';
         }
     };
   
     _this.getFileIcon = function(msg) {
       if (msg.fileMetaKey && typeof msg.fileMeta === 'object') {
         if (msg.fileMeta.contentType.indexOf('image') !== -1) {
           return '<span class="mck-icon--camera"><svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 24 24"><circle cx="12" cy="12" r="3.2" fill="rgba(38,50,56,.52)"/><path d="M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z" fill="rgba(38,50,56,.52)"/><path d="M0 0h24v24H0z" fill="none"/></svg></span>&nbsp;<span>Image</span>'
         } else if (msg.fileMeta.contentType.indexOf('audio') !== -1) {
           return '<span class="mck-attachement-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><g data-name="Group 122"><path fill="none" d="M0 0h24v24H0z" data-name="Rectangle 1"/><path d="M19.00483767 16.29529691l-11.90272845-.0417193a4.358 4.358 0 0 1-4.32607928-4.32607929A4.259 4.259 0 0 1 7.0483691 7.65515915l10.48639356.03394113v.70710678L7.07241074 8.3382243a3.61826547 3.61826547 0 1 0 .00141421 7.2365308l11.89990002.03889087a2.647 2.647 0 0 0 2.68700577-2.68700576 2.688 2.688 0 0 0-2.70680476-2.70680476l-10.15476048-.0615183a1.774 1.774 0 0 0-1.75998878 1.75998879 1.8 1.8 0 0 0 1.76776695 1.76776695l8.82681395.02899138v.70710678l-8.81832866-.02333453a2.491 2.491 0 0 1-2.47840927-2.47840926 2.46 2.46 0 0 1 2.46426713-2.46426714l10.18375186.0311127a3.462 3.462 0 0 1 3.4400745 3.4400745 3.424 3.424 0 0 1-3.4202755 3.3679496z" data-name="Path 1"/></g></svg></span>&nbsp;<span>Audio</span>';
         } else if (msg.fileMeta.contentType.indexOf('video') !== -1) {
           return '<span class="mck-icon--video"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="22" height="22"><path fill="rgba(38,50,56,.52)" d="M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l2.29 2.29c.63.63 1.71.18 1.71-.71V8.91c0-.89-1.08-1.34-1.71-.71L17 10.5z"/></svg></span>&nbsp;<span class="mck-icon-video-text">Video</span>';
         } else {
           return '<span class="mck-attachement-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><g data-name="Group 122"><path fill="none" d="M0 0h24v24H0z" data-name="Rectangle 1"/><path d="M19.00483767 16.29529691l-11.90272845-.0417193a4.358 4.358 0 0 1-4.32607928-4.32607929A4.259 4.259 0 0 1 7.0483691 7.65515915l10.48639356.03394113v.70710678L7.07241074 8.3382243a3.61826547 3.61826547 0 1 0 .00141421 7.2365308l11.89990002.03889087a2.647 2.647 0 0 0 2.68700577-2.68700576 2.688 2.688 0 0 0-2.70680476-2.70680476l-10.15476048-.0615183a1.774 1.774 0 0 0-1.75998878 1.75998879 1.8 1.8 0 0 0 1.76776695 1.76776695l8.82681395.02899138v.70710678l-8.81832866-.02333453a2.491 2.491 0 0 1-2.47840927-2.47840926 2.46 2.46 0 0 1 2.46426713-2.46426714l10.18375186.0311127a3.462 3.462 0 0 1 3.4400745 3.4400745 3.424 3.424 0 0 1-3.4202755 3.3679496z" data-name="Path 1"/></g></svg></span>&nbsp;<span>File</span>';
         }
       } else {
         return '';
       }
     };
   
     _this.downloadfile = function() {
       var url = _this.getFileurl(msg);
       var link = document.createElement("a");
       link.download = thefilename;
       link.setAttribute('href', url);
       // Construct the uri
       var uri = 'data:text/csv;charset=utf-8;base64,' + someb64data
       link.href = uri;
       document.body.appendChild(link);
       link.click();
       // Cleanup the DOM
       document.body.removeChild(link);
     };
   }
   
   (function(window){
       'use strict';
       function define_AlCustomService() {
     var AlCustomService = {};
   AlCustomService.logout = function() {
      if (typeof window.Applozic.ALSocket !== 'undefined') {
           window.Applozic.ALApiService.AUTH_TOKEN = null;
           window.Applozic.ALApiService.setAjaxHeaders('','','','','');
           window.Applozic.ALApiService.setEncryptionKeys(null, null);
           window.Applozic.ALSocket.disconnect();
           ALStorage.clearSessionStorageElements();
      }
   };
   
   return AlCustomService;
   }
   
   //define globally if it doesn't already exist
   if (typeof (AlCustomService) === 'undefined') {
       window.Applozic.AlCustomService = define_AlCustomService();
   }
   else {
       console.log("ALCustomService already defined.");
   }
   })(window);
   
   var mckLabels = new MckLabels();
   function MckLabels() {
       var _this = this;
   
       _this.getLabels = function() {
           return  {
               'conversations.title': 'Conversations',
               'start.new': 'Start New',
               'search.contacts': 'Contacts',
               'search.groups': 'Groups',
               'empty.groups': 'No groups yet!',
               'empty.contacts': 'No contacts yet!',
               'empty.messages': 'No messages yet!',
               'no.more.messages': 'No more messages!',
               'empty.conversations': 'No conversations yet!',
               'no.more.conversations': 'No more conversations!',
               'search.placeholder': 'Search...',
               'location.placeholder': 'Enter a location',
               'create.group.title': 'Create Group',
               'members.title': 'Members',
               'add.members.title': 'Add Member',
               'remove.member': 'Remove Member',
               'change.role': 'Change Role',
               'group.info.update': 'Update',
               'group.info.updating': 'Updating...',
               'add.group.icon': 'Add Group Icon',
               'group.deleted': 'Group has been deleted',
               'change.group.icon': 'Change Group Icon',
               'group.title': 'Group Title',
               'group.type': 'Group Type',
               'group.create.submit': 'Creating Group...',
               'blocked': 'You have blocked this user',
               'group.chat.disabled': 'You are no longer part of this group!',
               'block.user.alert': 'Are you sure you want to block this user?',
               'unblock.user.alert': 'Are you sure you want to unblock this user?',
               'exit.group.alert': 'Are you sure you want to exit this group?',
               'remove.member.alert': 'Are you sure you want to remove this member?',
               'clear.messages.alert': 'Are you sure you want to delete all the conversation?',
               'typing': 'typing...',
               'is.typing': 'is typing...',
               'online': 'Online',
               'clear.messages': 'Clear Messages',
               'delete': 'Delete',
               'reply': 'Reply',
               'forward': 'Forward',
               'copy': 'Copy',
               'block.user': 'Block User',
               'unblock.user': 'Unblock User',
               'group.info.title': 'Group Info',
               'exit.group': 'Exit Group',
               'location.share.title': 'Location Sharing',
               'my.location': 'My Location',
               'send': 'Send',
               'send.message': 'Send Message',
               'smiley': 'Smiley',
               'close': 'Close',
               'edit': 'Edit',
               'save': 'Save',
               'file.attachment': 'Files & Photos',
               'file.attach.title': 'Attach File',
               'last.seen': 'Last seen',
               'last.seen.on': 'Last seen on',
               'hour':' hour',
               'min':' min',
               'yesterday':'yesterday',
               'hours':' hours',
               'mins':' mins',
               'time.format.AM':'AM',
               'time.format.PM':'PM',
               'time.format.am':'am',
               'time.format.pm':'pm',
               'user.delete':'This user has been deleted',
               'ago': 'ago',
               'admin':'Admin',
               'user':'User',
               'moderator':'Moderator',
               'member':'Member',
               'public':'Public',
               'private':'Private',
               'open':'Open',
               'you':'You',
               'userIdPattern':'[^!$%\^&*()]+',
               'charsNotAllowedMessage':'Following characters are not allowed: !$%^&*()',
               'group.metadata': {
                   'CREATE_GROUP_MESSAGE': ':adminName created group :groupName',
                   'REMOVE_MEMBER_MESSAGE': ':adminName removed :userName',
                   'ADD_MEMBER_MESSAGE': ':adminName added :userName',
                   'JOIN_MEMBER_MESSAGE': ':userName joined',
                   'GROUP_NAME_CHANGE_MESSAGE': 'Group name changed to :groupName',
                   'GROUP_ICON_CHANGE_MESSAGE': 'Group icon changed',
                   'GROUP_LEFT_MESSAGE': ':userName left',
                   'DELETED_GROUP_MESSAGE': ':adminName deleted group',
                   'GROUP_USER_ROLE_UPDATED_MESSAGE': ':userName is :role now',
                   'GROUP_META_DATA_UPDATED_MESSAGE': '',
                   'ALERT': '',
                   'HIDE': ''
               }
           };  
       }
   
       _this.setLabels = function() {
           $applozic('#mck-conversation-title').html(MCK_LABELS['conversations.title']).attr('title', MCK_LABELS['conversations.title']);
           $applozic('#mck-msg-new, #mck-sidebox-search .mck-box-title').html(MCK_LABELS['start.new']).attr('title', MCK_LABELS['start.new']);
           $applozic('#mck-contact-search-tab strong').html(MCK_LABELS['search.contacts']).attr('title', MCK_LABELS['search.contacts']);
           $applozic('#mck-group-search-tab strong').html(MCK_LABELS['search.groups']).attr('title', MCK_LABELS['search.groups']);
           $applozic('#mck-contact-search-input, #mck-group-search-input, #mck-group-member-search').attr('placeholder', MCK_LABELS['search.placeholder']);
           $applozic('#mck-loc-address').attr('placeholder', MCK_LABELS['location.placeholder']);
           $applozic('#mck-no-conversations').html(MCK_LABELS['empty.conversations']);
           $applozic('#mck-no-messages').html(MCK_LABELS['empty.messages']);
           $applozic('#mck-no-more-conversations').html(MCK_LABELS['no.more.conversations']);
           $applozic('#mck-no-more-messages').html(MCK_LABELS['no.more.messages']);
           $applozic('#mck-no-search-contacts').html(MCK_LABELS['empty.contacts']);
           $applozic('#mck-no-search-groups').html(MCK_LABELS['empty.groups']);
           $applozic('#mck-new-group, #mck-group-create-tab .mck-box-title, #mck-btn-group-create').html(MCK_LABELS['create.group.title']).attr('title', MCK_LABELS['create.group.title']);
           $applozic('#mck-gc-overlay-label').html(MCK_LABELS['add.group.icon']);
           $applozic('#mck-msg-error').html(MCK_LABELS['group.deleted']);
           $applozic('#mck-gc-title-label').html(MCK_LABELS['group.title']);
           $applozic('#mck-gc-type-label').html(MCK_LABELS['group.type']);
           $applozic('#mck-group-info-btn, #mck-group-info-tab .mck-box-title').html(MCK_LABELS['group.info.title']).attr('title', MCK_LABELS['group.info.title']);
           $applozic('#mck-gi-overlay-label').html(MCK_LABELS['change.group.icon']);
           $applozic('#mck-group-member-title').html(MCK_LABELS['members.title']).attr('title', MCK_LABELS['members.title']);
           $applozic('#mck-group-add-member .blk-lg-9, #mck-gm-search-box .mck-box-title').html(MCK_LABELS['add.members.title']).attr('title', MCK_LABELS['add.members.title']);
           $applozic('#mck-btn-group-update').html(MCK_LABELS['group.info.update']).attr('title', MCK_LABELS['group.info.update']);
           $applozic('#mck-leave-group-btn, #mck-btn-group-exit').html(MCK_LABELS['exit.group']).attr('title', MCK_LABELS['exit.group']);
           $applozic('#mck-btn-leave-group, #mck-btn-group-exit').html(MCK_LABELS['exit.group']).attr('title', MCK_LABELS['exit.group']);
           $applozic('#mck-typing-label').html(MCK_LABELS['typing']);
           $applozic('#mck-btn-clear-messages').html(MCK_LABELS['clear.messages']).attr('title', MCK_LABELS['clear.messages']);
           $applozic('#mck-block-button').html(MCK_LABELS['block.user']).attr('title', MCK_LABELS['block.user']);
           $applozic('#mck-loc-box .mck-box-title, #mck-share-loc-label').html(MCK_LABELS['location.share.title']).attr('title', MCK_LABELS['location.share.title']);
           $applozic('#mck-btn-loc').attr('title', MCK_LABELS['location.share.title']);
           $applozic('#mck-file-up-label').html(MCK_LABELS['file.attachment']);
           $applozic('#mck-file-up').attr('title', MCK_LABELS['file.attachment']);
           $applozic('.mck-file-attach-label').attr('title', MCK_LABELS['file.attach.title']);
           $applozic('#mck-my-loc').html(MCK_LABELS['my.location']).attr('title', MCK_LABELS['my.location']);
           $applozic('#mck-btn-close-loc-box').html(MCK_LABELS['close']).attr('title', MCK_LABELS['close']);
           $applozic('#mck-loc-submit').html(MCK_LABELS['send']).attr('title', MCK_LABELS['send']);
           $applozic('#mck-msg-sbmt').attr('title', MCK_LABELS['send.message'])
           $applozic('#mck-btn-smiley').attr('title', MCK_LABELS['smiley']);
           $applozic('#mck-group-name-save').attr('title', MCK_LABELS['save']);
           $applozic('#mck-btn-group-icon-save').attr('title', MCK_LABELS['save']);
           $applozic('#mck-group-name-edit').attr('title', MCK_LABELS['edit']);
           $applozic('#mck-contact-search-input').attr('title', MCK_LABELS['charsNotAllowedMessage']);
       };
   };
      
   var alMessageService = new AlMessageService();
   
   function AlMessageService() {
     var _this = this;
     var IS_MCK_VISITOR;
     var MCK_USER_ID;
     var MCK_FILE_URL;
     var TOPIC_ID_URL = "/rest/ws/conversation/topicId";
     var CONVERSATION_ID_URL = "/rest/ws/conversation/id";
     var CONVERSATION_FETCH_URL = "/rest/ws/conversation/get";
     var MESSAGE_ADD_INBOX_URL = "/rest/ws/message/add/inbox";
     var CONVERSATION_CLOSE_UPDATE_URL = "/rest/ws/conversation/close";
     var CONVERSATION_DELETE_URL = "/rest/ws/message/delete/conversation";
     var CONVERSATION_READ_UPDATE_URL = "/rest/ws/message/read/conversation";
     var offlineblk = '<div id="mck-ofl-blk" class="mck-m-b"><div class="mck-clear"><div class="blk-lg-12 mck-text-light mck-text-muted mck-test-center">${userIdExpr} is offline now</div></div></div>';
     var refreshIntervalId;
   
     _this.init = function(options) {
       MCK_FILE_URL = options.fileBaseUrl;
       IS_MCK_VISITOR = options.visitor;
       MCK_USER_ID = (IS_MCK_VISITOR) ? 'guest' : (options && options.userId && options.userId.toString().trim());
     };
   
     _this.getConversation = function(params) {
       _this.getTopicId({
           'conversationId': params.conversationId
       }, function(params){
         mckMessageLayout.populateMessage(params.messageType, params.message, params.notifyUser);
       });
     };
   
     _this.addWelcomeMessage = function(params) {
       if (typeof params === "object") {
           if (typeof params.sender === 'undefined' || params.sender === '') {
               return 'Sender Field Required';
           }
           if (typeof params.messageContent === 'undefined' || params.messageContent === '') {
               return 'Message Content Required';
           }
           mckMessageService.sendWelcomeMessage(params);
       } else {
           return 'Unsupported format. Please check format';
       }
     };
   
     _this.getUserIdFromMessage = function(message) {
       var tos = message.to;
       if (tos.lastIndexOf(",") === tos.length - 1) {
           tos = tos.substring(0, tos.length - 1);
       }
       return tos.split(",");
     };
   
   
     _this.isValidMetaData = function(message) {
       if (!message.metadata) {
           return true;
       } else if (message.metadata.category === 'HIDDEN' || message.metadata.category === 'ARCHIVE') {
           return false;
       } else {
           return true;
       }
     };
   
     _this.getStatusIconName = function(msg) {
       if (msg.type === 7 || msg.type === 6 || msg.type === 4 || msg.type === 0) {
           return '';
       }
       if (msg.status === 5) {
           return 'mck-icon-read';
       }
       if (msg.status === 4) {
           return 'mck-icon-delivered';
       }
       if (msg.type === 3 || msg.type === 5 || (msg.type === 1 && (msg.source === 0 || msg.source === 1))) {
           return 'mck-icon-sent';
       }
       return '';
     };
     
     _this.addMessageToTab = function(messagePxy, contact, callback) {
       var message = {
         'to': messagePxy.to,
         'groupId': messagePxy.groupId,
         'deviceKey': messagePxy.deviceKey,
         'contentType': messagePxy.contentType,
         'message': messagePxy.message,
         'conversationId': messagePxy.conversationId,
         'topicId': messagePxy.topicId,
         'sendToDevice': true,
         'createdAtTime': new Date().getTime(),
         'key': messagePxy.key,
         'storeOnDevice': true,
         'sent': false,
         'read': true,
         'metadata': (messagePxy.metadata) ? messagePxy.metadata : ''
       };
       message.type = (messagePxy.type) ? messagePxy.type : 5;
       if (messagePxy.fileMeta) {
         message.fileMeta = messagePxy.fileMeta;
       }
       if (typeof callback === "function") {
         callback(message, contact);
       }
     };
   
     _this.getMessages = function(params) {
       var data = {};
       if (params.startTime) {
         data.endTime = params.startTime;
       }
       if (typeof params.userId !== 'undefined' && params.userId !== '') {
         if (params.isGroup) {
           data.groupId = params.userId;
         } else {
           data.userId = params.userId;
         }
         data.pageSize = 30;
         if ((IS_MCK_TOPIC_HEADER || IS_MCK_TOPIC_BOX) && params.conversationId) {
           data.conversationId = params.conversationId;
           if (typeof MCK_TAB_CONVERSATION_MAP[params.userId] === 'undefined') {
             data.conversationReq = true;
           }
         }
       } else {
         data.mainPageSize = 100;
       }
       window.Applozic.ALApiService.getMessages({
         data: data,
         success: params.callback,
         error: params.callback
       });
     };
     _this.getMessageList = function(params, callback) {
       var tabId = params.id;
       var data = {};
       var resp = {};
   
       if (params.startTime) {
         data.endTime = params.startTime;
       }
   
       if (typeof params.clientGroupId !== "undefined" && params.clientGroupId !== '') {
         if (params.pageSize) {
           data.pageSize = params.pageSize;
         } else {
           data.pageSize = 50;
         }
         data.clientGroupId = params.clientGroupId;
         resp = {
           'clientGroupId': params.clientGroupId
         };
       } else if (typeof tabId !== "undefined" && tabId !== '') {
         if (params.pageSize) {
           data.pageSize = params.pageSize;
         } else {
           data.pageSize = 50;
         }
         if ('' + params.isGroup === 'true') {
           data.groupId = tabId;
         } else {
           data.userId = tabId;
         }
         resp = {
           'id': tabId
         };
       } else {
         if (params.mainPageSize) {
           data.mainPageSize = params.pageSize;
         } else {
           data.mainPageSize = 50;
         }
         resp = {
           'id': ''
         };
       }
       if (params.topicId && (tabId || params.clientGroupId)) {
         if (params.conversationId) {
           data.conversationId = params.conversationId;
         }
         if (params.topicId) {
           resp['topicId'] = params.topicId;
         }
       }
       window.Applozic.ALApiService.getMessages({
         data: data,
         success: function(response) {
           var data = response.data;
           resp.status = "success";
           if (typeof data.message === "undefined" || data.message.length === 0) {
             resp.messages = [];
           } else {
             var messages = data.message;
             var messageFeeds = new Array();
             messages.forEach(function (message, i) {
               if (typeof callback === "function") {
                 callback(message);
               };
             });
             resp.messages = messageFeeds;
           }
           if (data.groupFeeds.length > 0) {
             resp.id = data.groupFeeds[0].id;
           }
           params.callback(data);
         },
         error: function(error) {
           resp.status = "error";
           params.callback(resp);
         }
       });
     };
     _this.getReplyMessageByKey = function(msgkey) {
       var replyMsg = ALStorage.getMessageByKey(msgkey);
       if (typeof replyMsg === "undefined") {
         window.Applozic.ALApiService.updateReplyMessage({
           data: {
             key: msgkey
           },
           async: false,
           success: function(data) {
             ALStorage.updateMckMessageArray(data);
           }
         });
       }
       return ALStorage.getMessageByKey(msgkey);
     };
   
     _this.sendDeliveryUpdate = function(message) {
       window.Applozic.ALApiService.sendDeliveryUpdate({
         data: {
           key: message.pairedMessageKey
         },
         success: function() {},
         error: function() {}
       });
     };
     _this.sendReadUpdate = function(key) {
       if (typeof key !== "undefined" && key !== '') {
         window.Applozic.ALApiService.sendReadUpdate({
           data: {
             key: key
           },
           success: function() {},
           error: function() {}
         });
       }
     };
   
     _this.fetchConversationByTopicId = function(data, callback) {
       window.Applozic.ALApiService.fetchConversationByTopicId({
         data:data,
         success: function(data) {
           if (typeof data === 'object' && data.status === "success") {
             var conversationList = data.response;
             if (conversationList && conversationList.length > 0) {
               conversationList.forEach(function (conversationPxy, i) {
                 MCK_CONVERSATION_MAP[conversationPxy.id] = conversationPxy;
                 MCK_TOPIC_CONVERSATION_MAP[conversationPxy.topicId] = [conversationPxy.id];
                 if (conversationPxy.topicDetail) {
                   try {
                     MCK_TOPIC_DETAIL_MAP[conversationPxy.topicId] = JSON.parse(conversationPxy.topicDetail);
                   } catch (ex) {
                     w.console.log('Incorect Topic Detail!');
                   }
                 }
                 if (params.tabId && typeof MCK_TAB_CONVERSATION_MAP[params.tabId] !== 'undefined') {
                   var tabConvArray = MCK_TAB_CONVERSATION_MAP[params.tabId];
                   tabConvArray.push(conversationPxy);
                   MCK_TAB_CONVERSATION_MAP[params.tabId] = tabConvArray;
                 }
               });
             };
             if (params.isExtMessageList) {
               if (conversationList.length > 0) {
                 params.conversationId = conversationList[0].id;
                 params.pageSize = 50;
                 if (typeof callback === "function") {
                   callback(params);
                 }
               } else {
                 if (typeof params.callback === 'function') {
                   var resp = {};
                   if (params.tabId) {
                     resp.id = params.tabId;
                     resp.isGroup = params.isGroup;
                   } else if (params.clientGroupId) {
                     resp.clientGroupId = params.clientGroupId;
                   }
                   resp.topicId = params.topicId;
                   resp.status = "success";
                   resp.messages = [];
                   params.callback(resp);
                 }
               }
             }
           } else {
             if (params.isExtMessageList && typeof params.callback === 'function') {
               var resp = {};
               if (params.tabId) {
                 resp.id = params.tabId;
               } else if (params.clientGroupId) {
                 resp.clientGroupId = params.clientGroupId;
               }
               resp.topicId = params.topicId;
               resp.status = "error";
               resp.errorMessage = 'Unable to process request. Please try again.';
               params.callback(resp);
             }
           }
         },
         error: function() {
           if (typeof params.callback === 'function') {
             var resp = {};
             if (params.tabId) {
               resp.id = params.tabId;
             } else if (params.clientGroupId) {
               resp.clientGroupId = params.clientGroupId;
             }
             resp.topicId = params.topicId;
             resp.status = "error";
             resp.errorMessage = 'Unable to process request. Please try again.';
             params.callback(resp);
           }
         }
       });
     };
     _this.getTopicId = function(params, callback) {
       if (params.conversationId) {
         var data = "id=" + params.conversationId;
         window.Applozic.ALApiService.getTopicId({
           data: {
             "conversationId": params.conversationId
           },
           success: function(result) {
             if (typeof data === 'object' && data.status === 'success') {
               var conversationPxy = data.response;
               if (typeof conversationPxy === 'object') {
                 MCK_TOPIC_CONVERSATION_MAP[conversationPxy.topicId] = [params.conversationId];
                 MCK_CONVERSATION_MAP[params.conversationId] = conversationPxy;
                 if (conversationPxy.topicDetail) {
                   try {
                     MCK_TOPIC_DETAIL_MAP[conversationPxy.topicId] = JSON.parse(conversationPxy.topicDetail);
                   } catch (ex) {
                     w.console.log('Incorect Topic Detail!');
                   }
                 }
                 if (typeof(MCK_PRICE_DETAIL) === 'function' && params.priceText) {
                   MCK_PRICE_DETAIL({
                     'custId': MCK_USER_ID,
                     'suppId': params.suppId,
                     'productId': conversationPxy.topicId,
                     'price': params.priceText
                   });
                   _this.sendConversationCloseUpdate(params.conversationId);
                 }
                 if (params.messageType && typeof params.message === 'object') {
                   var tabId = (params.message.groupId) ? params.message.groupId : params.message.to;
                   if (typeof MCK_TAB_CONVERSATION_MAP[tabId] !== 'undefined') {
                     var tabConvArray = MCK_TAB_CONVERSATION_MAP[tabId];
                     tabConvArray.push(conversationPxy);
                     MCK_TAB_CONVERSATION_MAP[tabId] = tabConvArray;
                   }
                   if (typeof params.populate !== 'undefined' ? params.populate : true) {
                     if (typeof callback === "function") {
                       callback(params);
                     }
                   }
                 }
   
                 if (typeof params.callback === 'function') {
                   params.callback(conversationPxy);
                 }
               }
             }
           },
           error: function() {}
         });
       }
     };
     _this.sendConversationCloseUpdate = function(conversationId) {
       if (conversationId) {
         var data = "id=" + conversationId;
         window.Applozic.ALApiService.sendConversationCloseUpdate({
           conversationId: conversationId,
           success: function(result) {},
           error: function() {}
         });
       }
     };
   
     _this.dispatchMessage = function(params) {
       if (params.messagePxy === 'object') {
         var messagePxy = params.messagePxy;
         if (params.topicId) {
           var topicDetail = MCK_TOPIC_DETAIL_MAP[params.topicId];
           if (typeof topicDetail === 'object' && topicDetail.title !== 'undefined') {
             if (!messagePxy.message) {
               messagePxy.message = topicDetail.title && topicDetail.title.trim();
             }
             if (params.conversationId) {
               messagePxy.conversationId = params.conversationId;
             } else if (params.topicId) {
               var conversationPxy = {
                 'topicId': params.topicId
               };
               if (typeof topicDetail === "object") {
                 conversationPxy.topicDetail = w.JSON.stringify(topicDetail);
               }
               messagePxy.conversationPxy = conversationPxy;
             }
           }
           if (!messagePxy.message && topicDetail.link) {
             var fileMeta = {
               "blobKey": topicDetail.link.trim(),
               "contentType": "image/png"
             };
             messagePxy.fileMeta = fileMeta;
             messagePxy.contentType = 5;
             FILE_META = [];
             FILE_META.push(fileMeta);
           }
         }
         if (params.isGroup) {
           messagePxy.groupId = params.tabId;
         } else {
           messagePxy.to = params.tabId;
         }
         mckMessageService.sendMessage(messagePxy);
       }
     };
   
     _this.sendVideoCallMessage = function(callId, msgType, contentType, audioOnly, toUser, callback) {
       var message = (msgType == "CALL_MISSED") ? "Missed Call" : (msgType == "CALL_REJECTED") ? "Call Rejected" : "";
       if (message == "" || message == undefined) {
         message = "video message";
       }
       var metadata = {
         "MSG_TYPE": msgType,
         "CALL_ID": callId,
         "CALL_AUDIO_ONLY": audioOnly
       }
       var messagePxy = {
         "to": toUser,
         "type": 5,
         "contentType": contentType,
         "message": message,
         "metadata": metadata,
         "senderName": MCK_USER_ID
       };
       callback(messagePxy);
       return messagePxy;
     };
     _this.sendVideoCallEndMessage = function(callId, msgType, contentType, audioOnly, callDuration, toUser, callback) {
   
       var callDurationStr = "";
       if (callDuration) {
         callDurationStr = mckDateUtils.convertMilisIntoTime(callDuration);
       }
       var message = (msgType == "CALL_MISSED") ? "Missed Call" : (msgType == "CALL_REJECTED") ? "Call Rejected" : (msgType == "CALL_END") ? "Call End \n Duration: " + callDurationStr : "video message";
       if (message == "" || message == undefined) {
         message = "video message";
       }
   
       var metadata = {
         "MSG_TYPE": msgType,
         "CALL_ID": callId,
         "CALL_AUDIO_ONLY": audioOnly,
         "CALL_DURATION": callDuration
       }
       var messagePxy = {
         "to": toUser,
         "type": 5,
         "contentType": contentType,
         "message": message,
         "metadata": metadata
       };
       callback(messagePxy);
       return messagePxy;
     };
   
     _this.getMessageFeed = function(message) {
       var messageFeed = {};
       MCK_FILE_URL = window.Applozic.ALApiService.getFileUrl();
       messageFeed.key = message.key;
       messageFeed.contentType = message.contentType;
       messageFeed.timeStamp = message.createdAtTime;
       messageFeed.message = message.message;
       messageFeed.from = (message.type === 4) ? message.to : MCK_USER_ID;
       if (message.groupId) {
         messageFeed.to = message.groupId;
       } else {
         messageFeed.to = (message.type === 5) ? message.to : MCK_USER_ID;
       }
       messageFeed.status = "read";
       messageFeed.type = (message.type === 4) ? 'inbox' : 'outbox';
       if (message.type === 5) {
         if (message.status === 3) {
           messageFeed.status = "sent";
         } else if (message.status === 4) {
           messageFeed.status = "delivered";
         }
       }
       if (typeof message.fileMeta === 'object') {
         var file = mckUtils.extendObject({}, {}, message.fileMeta);
         if (typeof file.url === 'undefined' || file.url === '') {
           file.url = MCK_FILE_URL + '/rest/ws/aws/file/' + message.fileMeta.blobKey;
         }
         delete file.blobKey;
         messageFeed.file = file;
       }
       messageFeed.source = message.source;
       messageFeed.metadata = message.metadata;
       return messageFeed;
     };
   
   }
   