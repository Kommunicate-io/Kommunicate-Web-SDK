(function (window) {
    'use strict';
    function define_KMCommonUtils() {
        var KMCommonUtils = {};

        KMCommonUtils.ajax = function (options) {
            function extend() {
                for (var i = 1; i < arguments.length; i++)
                    for (var key in arguments[i])
                        if (arguments[i].hasOwnProperty(key))
                            arguments[0][key] = arguments[i][key];
                return arguments[0];
            }

            var reqOptions = extend({}, {}, options);

            var request = new XMLHttpRequest();
            var responsedata;
            var asyn = true;
            var cttype;
            if (typeof reqOptions.async !== 'undefined' || options.async) {
                asyn = reqOptions.async;
            }

            var typ = reqOptions.type.toUpperCase();

            if (typ === 'GET' && typeof reqOptions.data !== "undefined") {
                reqOptions.url = reqOptions.url + "?" + reqOptions.data;
            }

            request.open(typ, reqOptions.url, asyn);
            if (typ === 'POST' || typ === 'GET') {
                if (typeof reqOptions.contentType === 'undefined') {
                    cttype = 'application/x-www-form-urlencoded; charset=UTF-8';
                } else {
                    cttype = reqOptions.contentType;
                }
                request.setRequestHeader('Content-Type', cttype);
            }

            if (typeof reqOptions.data === 'undefined') {
                request.send();
            } else {
                request.send(reqOptions.data);
            }

            request.onreadystatechange = function () {
                if (request.readyState === XMLHttpRequest.DONE) {
                    if (request.status === 200) {
                        //success
                        var contType = request.getResponseHeader("Content-Type");
                        if (typeof contType === "undefined" || contType === "null" || contType === null) {
                            contType = "";
                        }

                        if (contType.toLowerCase().indexOf("text/html") != -1) {
                            responsedata = request.responseXML;
                        } else if (contType.toLowerCase().indexOf("application/json") != -1) {
                            responsedata = JSON.parse(request.responseText);
                        } else {
                            responsedata = request.responseText;
                        }
                        reqOptions.success(responsedata);
                    } else {
                        //error
                        reqOptions.error(responsedata);
                    }
                }
            };
        }

        return KMCommonUtils;
    }
    //define globally if it doesn't already exist
    if (typeof (KMCommonUtils) === 'undefined') {
        window.KMCommonUtils = define_KMCommonUtils();
    }
    else {
        console.log("KMCommonUtils already defined.");
    }
})(window);
(function (window) {
    'use strict';
    function define_Helpdocs() {
        var Helpdocs = {};
        var HELPDOCS_URL = "https://api.helpdocs.io";

        //Helpdocs.getArticles({data: {helpdocsAccessKey: '', query: 'apns'}, success: function(response) {console.log(response);}, error: function() {}});
        Helpdocs.getArticles = function (options) {
            var url = HELPDOCS_URL + "/v1/article?key=" + options.data.helpdocsAccessKey;
            if (options.data.query) {
                url = HELPDOCS_URL + "/v1/search?key=" + options.data.helpdocsAccessKey + "&query=" + options.data.query;
            }

            var response = new Object();
            KMCommonUtils.ajax({
                url: url,
                async: (typeof options.async !== 'undefined') ? options.async : true,
                type: 'get',
                success: function (data) {
                    response.status = "success";
                    response.data = data;
                    if (options.success) {
                        options.success(response);
                    }
                    return;
                },
                error: function (xhr, desc, err) {
                    response.status = "error";
                    if (options.error) {
                        options.error(response);
                    }
                }
            });
        }

        //Helpdocs.getArticle({data: {articleId: 'tuqx5g5kq5'}, success: function(response) {console.log(response);}, error: function() {}});
        Helpdocs.getArticle = function (options) {
            var response = new Object();
            KMCommonUtils.ajax({
                url: HELPDOCS_URL + "/v1/article/" + options.data.articleId + "?key=" + options.data.helpdocsAccessKey,
                async: (typeof options.async !== 'undefined') ? options.async : true,
                type: 'get',
                success: function (data) {
                    response.status = "success";
                    response.data = data;
                    if (options.success) {
                        options.success(response);
                    }
                    return;
                },
                error: function (xhr, desc, err) {
                    response.status = "error";
                    if (options.error) {
                        options.error(response);
                    }
                }
            });
        }

        return Helpdocs;
    }
    //define globally if it doesn't already exist
    if (typeof (Helpdocs) === 'undefined') {
        window.Helpdocs = define_Helpdocs();
    }
    else {
        console.log("Helpdocs already defined.");
    }
})(window);
(function (window) {
    'use strict';
    function define_KommunicateKB() {
        var KommunicateKB = {};
        var KM_API_URL = "https://api.kommunicate.io";
        var KB_URL = "/kb/search?appId=:appId";
        var SOURCES = {kommunicate : 'KOMMUNICATE', helpdocs: 'HELPDOCS'};

        //KommunicateKB.init("https://api.kommunicate.io");
        KommunicateKB.init = function (url) {
            KM_API_URL = url;
        }

        //KommunicateKB.getArticles({data: {appId: 'kommunicate-support', query: 'fcm', helpdocsAccessKey: 'cgIRxXkKSsyBYPTlPg4veC5kxvuKL9cC4Ip9UEao'}, success: function(response) {console.log(response);}, error: function() {}});
        KommunicateKB.getArticles = function(options) {
            try{
            var articles = [];
            KommunicateKB.getFaqs({data: options.data, success: function(response) {
                for (var i = 0; i < response.data.length; i++){
                    var article = response.data[i];
                    articles.push({
                        articleId: article.id,
                        title: article.name,
                        description: article.content, 
                        status: article.status,
                        body: article.content,
                        source: SOURCES.kommunicate
                    });
                }

                if (options.data.helpdocsAccessKey) {
                    Helpdocs.getArticles({data: options.data, success:function(response) {
                            var data = response.data;
                            for (var i = 0; i < data.articles.length; i++){
                                var article = data.articles[i];
                                if(article.is_published === true){
                                articles.push({
                                    articleId: article.article_id,
                                    title: article.title,
                                    description: article.description, 
                                    body: article.description,
                                    url: article.url,
                                    source: SOURCES.helpdocs
                                });
                            }
                        }

                            if (options.success) {
                                var res = new Object();
                                res.status = "success";
                                res.data = articles;
                                options.success(res);
                            }
                        }, error: function(error) {
                            if(articles.length && options.success){
                                var res = new Object();
                                res.status = "success";
                                res.data = articles;
                                options.success(res);
                            }else if(options.error){
                            options.error(error);
                            }
                            
                        }
                    });
                } else {
                    if (options.success) {
                        var res = new Object();
                        res.status = "success";
                        res.data = articles;
                        options.success(res);
                    }
                }

            }, error: function(err) {
                if(typeof options.error ==='function' ){
                    options.err(err);
                }
                
            }});
        }catch(e){
            options.error(e);
            }
        }

        //KommunicateKB.getArticle({data: {appId: 'kommunicate-support', articleId: 'tuqx5g5kq5', source: 'HELPDOCS', helpdocsAccessKey: 'cgIRxXkKSsyBYPTlPg4veC5kxvuKL9cC4Ip9UEao'}, success: function(response) {console.log(response);}, error: function() {}});
        KommunicateKB.getArticle = function (options) {
            if (options.data.source == SOURCES.helpdocs) {
                Helpdocs.getArticle({data: options.data, success: function(response) {
                    var article = response.data.article;
                    var article = {
                        articleId: article.article_id,
                        title: article.title,
                        description: article.description, 
                        body: article.body,
                        url: article.url,
                        source: SOURCES.helpdocs
                    };

                    if (options.success) {
                        var res = new Object();
                        res.status = "success";
                        res.data = article;
                        options.success(res);
                    }
                }, error: function(e) {
                    options.error(e);
                }
                });
            } else {
                KommunicateKB.getFaq({data: options.data, success: function(response) {
                    var faq = response.data.data[0];
                    
                    var article = {
                        articleId: faq.id,
                        title: faq.name,
                        description: faq.content, 
                        body: faq.content,
                        status: faq.status,
                        source: SOURCES.kommunicate
                    };

                    if (options.success) {
                        var res = new Object();
                        res.status = "success";
                        res.data = article;
                        options.success(res);
                    }
                }, error: function(e) {
                    options.error(e);
                }
            });
            }
        }

        //KommunicateKB.getFaqs({data: {appId: 'kommunicate-support', query: 'apns'}, success: function(response) {console.log(response);}, error: function() {}});
        KommunicateKB.getFaqs = function (options) {
            var url = KM_API_URL + KB_URL.replace(":appId", options.data.appId);
            if (options.data.query) {
                url = url + "&query=" + options.data.query;
            }

            //Todo: if query is present then call machine learning server to get answer ids.
            //curl -H "Content-Type: application/json" -d '{ "text":"how to setup notification", "appId":"kommunicate-support" }' https://machine.kommunicate.io/queries.json

            var response = new Object();
            KMCommonUtils.ajax({
                url: url,
                async: (typeof options.async !== 'undefined') ? options.async : true,
                type: 'get',
                success: function (data) {
                    response.status = "success";
                    response.data = data.data;
                    if (options.success) {
                        options.success(response);
                    }
                    return;
                },
                error: function (xhr, desc, err) {
                    response.status = "error";
                    if (options.error) {
                        options.error(response);
                    }
                }
            });
        }

        //KommunicateKB.getFaq({data: {appId: 'kommunicate-support', articleId: 1}, success: function(response) {console.log(response);}, error: function() {}});
        //Note: server side not supported yet
        KommunicateKB.getFaq = function (options) {
            var response = new Object();

            let url = KM_API_URL + KB_URL.replace(":appId", options.data.appId);
            if(options.data && options.data.articleId){
                url += "&articleId=" + options.data.articleId;
            }

            KMCommonUtils.ajax({
                url: url,
                async: (typeof options.async !== 'undefined') ? options.async : true,
                type: 'get',
                success: function (data) {
                    response.status = "success";
                    response.data = data;
                    if (options.success) {
                        options.success(response);
                    }
                    return;
                },
                error: function (xhr, desc, err) {
                    response.status = "error";
                    if (options.error) {
                        options.error(response);
                    }
                }
            });
        }

        return KommunicateKB;
    }
    //define globally if it doesn't already exist
    if (typeof (KommunicateKB) === 'undefined') {
        window.KommunicateKB = define_KommunicateKB();
    }
    else {
        console.log("KommunicateKB already defined.");
    }
})(window);